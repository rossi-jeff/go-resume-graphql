// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Address struct {
	Address *string `json:"Address,omitempty"`
	Suite   *string `json:"Suite,omitempty"`
	City    *string `json:"City,omitempty"`
	State   *string `json:"State,omitempty"`
	Zip     *string `json:"Zip,omitempty"`
}

type AddressInput struct {
	Address *string `json:"Address,omitempty"`
	Suite   *string `json:"Suite,omitempty"`
	City    *string `json:"City,omitempty"`
	State   *string `json:"State,omitempty"`
	Zip     *string `json:"Zip,omitempty"`
}

type Admin struct {
	ID          int          `json:"Id"`
	Created     *string      `json:"Created,omitempty"`
	Updated     *string      `json:"Updated,omitempty"`
	Version     *int         `json:"Version,omitempty"`
	IsDeleted   *bool        `json:"IsDeleted,omitempty"`
	Name        *Name        `json:"Name,omitempty"`
	Credentials *Credentials `json:"Credentials,omitempty"`
	UUID        *string      `json:"UUID,omitempty"`
	Address     *Address     `json:"Address,omitempty"`
	Phones      []*Phone     `json:"Phones,omitempty"`
	Emails      []*Email     `json:"Emails,omitempty"`
	Comments    []*Comment   `json:"Comments,omitempty"`
}

type Auth struct {
	Token string `json:"Token"`
	UUID  string `json:"UUID"`
	Class string `json:"Class"`
}

type Comment struct {
	ID         int          `json:"Id"`
	Created    *string      `json:"Created,omitempty"`
	Updated    *string      `json:"Updated,omitempty"`
	Version    *int         `json:"Version,omitempty"`
	IsDeleted  *bool        `json:"IsDeleted,omitempty"`
	Type       *CommentType `json:"Type,omitempty"`
	Message    *string      `json:"Message,omitempty"`
	Approved   *bool        `json:"Approved,omitempty"`
	Admins     []*Admin     `json:"Admins,omitempty"`
	References []*Reference `json:"References,omitempty"`
	Visitors   []*Visitor   `json:"Visitors,omitempty"`
}

type Contact struct {
	ID        int               `json:"Id"`
	Created   *string           `json:"Created,omitempty"`
	Updated   *string           `json:"Updated,omitempty"`
	Version   *int              `json:"Version,omitempty"`
	IsDeleted *bool             `json:"IsDeleted,omitempty"`
	Name      *Name             `json:"Name,omitempty"`
	Address   *Address          `json:"Address,omitempty"`
	EmailType *EmailType        `json:"EmailType,omitempty"`
	Email     *string           `json:"Email,omitempty"`
	PhoneType *PhoneType        `json:"PhoneType,omitempty"`
	Phone     *string           `json:"Phone,omitempty"`
	Preferred *PreferredContact `json:"Preferred,omitempty"`
	Subject   *string           `json:"Subject,omitempty"`
	Message   *string           `json:"Message,omitempty"`
}

type Credentials struct {
	Username *string `json:"Username,omitempty"`
}

type CredentialsInput struct {
	Username *string `json:"Username,omitempty"`
	Password *string `json:"Password,omitempty"`
}

type Email struct {
	ID        int        `json:"Id"`
	Created   *string    `json:"Created,omitempty"`
	Updated   *string    `json:"Updated,omitempty"`
	Version   *int       `json:"Version,omitempty"`
	IsDeleted *bool      `json:"IsDeleted,omitempty"`
	Type      *EmailType `json:"Type,omitempty"`
	Address   *string    `json:"Address,omitempty"`
}

type EmailInput struct {
	ID      int        `json:"Id"`
	Type    *EmailType `json:"Type,omitempty"`
	Address *string    `json:"Address,omitempty"`
}

type Job struct {
	ID        int        `json:"Id"`
	Created   *string    `json:"Created,omitempty"`
	Updated   *string    `json:"Updated,omitempty"`
	Version   *int       `json:"Version,omitempty"`
	IsDeleted *bool      `json:"IsDeleted,omitempty"`
	Company   *string    `json:"Company,omitempty"`
	Address   *Address   `json:"Address,omitempty"`
	Title     *string    `json:"Title,omitempty"`
	Duties    *string    `json:"Duties,omitempty"`
	From      *MonthYear `json:"From,omitempty"`
	To        *MonthYear `json:"To,omitempty"`
}

type Link struct {
	ID          int          `json:"Id"`
	Created     *string      `json:"Created,omitempty"`
	Updated     *string      `json:"Updated,omitempty"`
	Version     *int         `json:"Version,omitempty"`
	IsDeleted   *bool        `json:"IsDeleted,omitempty"`
	URL         *string      `json:"Url,omitempty"`
	Title       *string      `json:"Title,omitempty"`
	Description *string      `json:"Description,omitempty"`
	Type        *LinkType    `json:"Type,omitempty"`
	Parameters  []*Parameter `json:"Parameters,omitempty"`
}

type MonthYear struct {
	Month *Month `json:"Month,omitempty"`
	Year  int    `json:"Year"`
}

type MonthYearInput struct {
	Month *Month `json:"Month,omitempty"`
	Year  int    `json:"Year"`
}

type Name struct {
	Salutation *Salutation `json:"Salutation,omitempty"`
	First      *string     `json:"First,omitempty"`
	Middle     *string     `json:"Middle,omitempty"`
	Last       *string     `json:"Last,omitempty"`
	Suffix     *string     `json:"Suffix,omitempty"`
}

type NameInput struct {
	Salutation *Salutation `json:"Salutation,omitempty"`
	First      *string     `json:"First,omitempty"`
	Middle     *string     `json:"Middle,omitempty"`
	Last       *string     `json:"Last,omitempty"`
	Suffix     *string     `json:"Suffix,omitempty"`
}

type Page struct {
	ID        int     `json:"Id"`
	Created   *string `json:"Created,omitempty"`
	Updated   *string `json:"Updated,omitempty"`
	Version   *int    `json:"Version,omitempty"`
	IsDeleted *bool   `json:"IsDeleted,omitempty"`
	Name      *string `json:"Name,omitempty"`
	Content   *string `json:"Content,omitempty"`
}

type Parameter struct {
	ID        int     `json:"Id"`
	Created   *string `json:"Created,omitempty"`
	Updated   *string `json:"Updated,omitempty"`
	Version   *int    `json:"Version,omitempty"`
	IsDeleted *bool   `json:"IsDeleted,omitempty"`
	Key       *string `json:"Key,omitempty"`
	Value     *string `json:"Value,omitempty"`
}

type ParameterInput struct {
	ID    int     `json:"Id"`
	Key   *string `json:"Key,omitempty"`
	Value *string `json:"Value,omitempty"`
}

type Phone struct {
	ID        int        `json:"Id"`
	Created   *string    `json:"Created,omitempty"`
	Updated   *string    `json:"Updated,omitempty"`
	Version   *int       `json:"Version,omitempty"`
	IsDeleted *bool      `json:"IsDeleted,omitempty"`
	Type      *PhoneType `json:"Type,omitempty"`
	Number    *string    `json:"Number,omitempty"`
	Extension *string    `json:"Extension,omitempty"`
}

type PhoneInput struct {
	ID        int        `json:"Id"`
	Type      *PhoneType `json:"Type,omitempty"`
	Number    *string    `json:"Number,omitempty"`
	Extension *string    `json:"Extension,omitempty"`
}

type Reference struct {
	ID          int          `json:"Id"`
	Created     *string      `json:"Created,omitempty"`
	Updated     *string      `json:"Updated,omitempty"`
	Version     *int         `json:"Version,omitempty"`
	IsDeleted   *bool        `json:"IsDeleted,omitempty"`
	Name        *Name        `json:"Name,omitempty"`
	Credentials *Credentials `json:"Credentials,omitempty"`
	UUID        *string      `json:"UUID,omitempty"`
	Address     *Address     `json:"Address,omitempty"`
	Title       *string      `json:"Title,omitempty"`
	Company     *string      `json:"Company,omitempty"`
	Phones      []*Phone     `json:"Phones,omitempty"`
	Emails      []*Email     `json:"Emails,omitempty"`
	Comments    []*Comment   `json:"Comments,omitempty"`
	Approved    *bool        `json:"Approved,omitempty"`
}

type School struct {
	ID        int        `json:"Id"`
	Created   *string    `json:"Created,omitempty"`
	Updated   *string    `json:"Updated,omitempty"`
	Version   *int       `json:"Version,omitempty"`
	IsDeleted *bool      `json:"IsDeleted,omitempty"`
	Name      *string    `json:"Name,omitempty"`
	Address   *Address   `json:"Address,omitempty"`
	Program   *string    `json:"Program,omitempty"`
	Degree    *string    `json:"Degree,omitempty"`
	From      *MonthYear `json:"From,omitempty"`
	To        *MonthYear `json:"To,omitempty"`
}

type Visitor struct {
	ID          int          `json:"Id"`
	Created     *string      `json:"Created,omitempty"`
	Updated     *string      `json:"Updated,omitempty"`
	Version     *int         `json:"Version,omitempty"`
	IsDeleted   *bool        `json:"IsDeleted,omitempty"`
	Name        *Name        `json:"Name,omitempty"`
	Credentials *Credentials `json:"Credentials,omitempty"`
	UUID        *string      `json:"UUID,omitempty"`
	Email       *string      `json:"Email,omitempty"`
	Approved    *bool        `json:"Approved,omitempty"`
}

type CommentType string

const (
	CommentTypeRecommendation CommentType = "Recommendation"
	CommentTypeTestimonial    CommentType = "Testimonial"
	CommentTypeCriticism      CommentType = "Criticism"
	CommentTypeNotification   CommentType = "Notification"
	CommentTypeGeneral        CommentType = "General"
)

var AllCommentType = []CommentType{
	CommentTypeRecommendation,
	CommentTypeTestimonial,
	CommentTypeCriticism,
	CommentTypeNotification,
	CommentTypeGeneral,
}

func (e CommentType) IsValid() bool {
	switch e {
	case CommentTypeRecommendation, CommentTypeTestimonial, CommentTypeCriticism, CommentTypeNotification, CommentTypeGeneral:
		return true
	}
	return false
}

func (e CommentType) String() string {
	return string(e)
}

func (e *CommentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommentType", str)
	}
	return nil
}

func (e CommentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailType string

const (
	EmailTypeWork EmailType = "Work"
	EmailTypeHome EmailType = "Home"
)

var AllEmailType = []EmailType{
	EmailTypeWork,
	EmailTypeHome,
}

func (e EmailType) IsValid() bool {
	switch e {
	case EmailTypeWork, EmailTypeHome:
		return true
	}
	return false
}

func (e EmailType) String() string {
	return string(e)
}

func (e *EmailType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailType", str)
	}
	return nil
}

func (e EmailType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LinkType string

const (
	LinkTypeResource LinkType = "Resource"
	LinkTypeSample   LinkType = "Sample"
	LinkTypeProject  LinkType = "Project"
)

var AllLinkType = []LinkType{
	LinkTypeResource,
	LinkTypeSample,
	LinkTypeProject,
}

func (e LinkType) IsValid() bool {
	switch e {
	case LinkTypeResource, LinkTypeSample, LinkTypeProject:
		return true
	}
	return false
}

func (e LinkType) String() string {
	return string(e)
}

func (e *LinkType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LinkType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LinkType", str)
	}
	return nil
}

func (e LinkType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Month string

const (
	MonthJanuary   Month = "January"
	MonthFebruary  Month = "February"
	MonthMarch     Month = "March"
	MonthApril     Month = "April"
	MonthMay       Month = "May"
	MonthJune      Month = "June"
	MonthJuly      Month = "July"
	MonthAugust    Month = "August"
	MonthSeptember Month = "September"
	MonthOctober   Month = "October"
	MonthNovember  Month = "November"
	MonthDecember  Month = "December"
)

var AllMonth = []Month{
	MonthJanuary,
	MonthFebruary,
	MonthMarch,
	MonthApril,
	MonthMay,
	MonthJune,
	MonthJuly,
	MonthAugust,
	MonthSeptember,
	MonthOctober,
	MonthNovember,
	MonthDecember,
}

func (e Month) IsValid() bool {
	switch e {
	case MonthJanuary, MonthFebruary, MonthMarch, MonthApril, MonthMay, MonthJune, MonthJuly, MonthAugust, MonthSeptember, MonthOctober, MonthNovember, MonthDecember:
		return true
	}
	return false
}

func (e Month) String() string {
	return string(e)
}

func (e *Month) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Month(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Month", str)
	}
	return nil
}

func (e Month) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PhoneType string

const (
	PhoneTypeWork   PhoneType = "Work"
	PhoneTypeMobile PhoneType = "Mobile"
	PhoneTypeHome   PhoneType = "Home"
)

var AllPhoneType = []PhoneType{
	PhoneTypeWork,
	PhoneTypeMobile,
	PhoneTypeHome,
}

func (e PhoneType) IsValid() bool {
	switch e {
	case PhoneTypeWork, PhoneTypeMobile, PhoneTypeHome:
		return true
	}
	return false
}

func (e PhoneType) String() string {
	return string(e)
}

func (e *PhoneType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PhoneType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PhoneType", str)
	}
	return nil
}

func (e PhoneType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PreferredContact string

const (
	PreferredContactPhone PreferredContact = "Phone"
	PreferredContactEmail PreferredContact = "Email"
)

var AllPreferredContact = []PreferredContact{
	PreferredContactPhone,
	PreferredContactEmail,
}

func (e PreferredContact) IsValid() bool {
	switch e {
	case PreferredContactPhone, PreferredContactEmail:
		return true
	}
	return false
}

func (e PreferredContact) String() string {
	return string(e)
}

func (e *PreferredContact) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PreferredContact(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PreferredContact", str)
	}
	return nil
}

func (e PreferredContact) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Salutation string

const (
	SalutationMr   Salutation = "Mr"
	SalutationMrs  Salutation = "Mrs"
	SalutationMiss Salutation = "Miss"
	SalutationMs   Salutation = "Ms"
	SalutationDr   Salutation = "Dr"
)

var AllSalutation = []Salutation{
	SalutationMr,
	SalutationMrs,
	SalutationMiss,
	SalutationMs,
	SalutationDr,
}

func (e Salutation) IsValid() bool {
	switch e {
	case SalutationMr, SalutationMrs, SalutationMiss, SalutationMs, SalutationDr:
		return true
	}
	return false
}

func (e Salutation) String() string {
	return string(e)
}

func (e *Salutation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Salutation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Salutation", str)
	}
	return nil
}

func (e Salutation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
