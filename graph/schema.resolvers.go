package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/rossi-jeff/go-resume-graphql/graph/model"
)

// CreateReference is the resolver for the createReference field.
func (r *mutationResolver) CreateReference(ctx context.Context, name *model.NameInput, address *model.AddressInput, title *string, company *string, phones []*model.PhoneInput, emails []*model.EmailInput, credentials *model.CredentialsInput) (*model.Reference, error) {
	panic(fmt.Errorf("not implemented: CreateReference - createReference"))
}

// UpdateReference is the resolver for the updateReference field.
func (r *mutationResolver) UpdateReference(ctx context.Context, uuid string, name *model.NameInput, address *model.AddressInput, title *string, company *string, phones []*model.PhoneInput, emails []*model.EmailInput, credentials *model.CredentialsInput) (*model.Reference, error) {
	panic(fmt.Errorf("not implemented: UpdateReference - updateReference"))
}

// DeleteReference is the resolver for the deleteReference field.
func (r *mutationResolver) DeleteReference(ctx context.Context, uuid string) (*model.Reference, error) {
	panic(fmt.Errorf("not implemented: DeleteReference - deleteReference"))
}

// ApproveReference is the resolver for the approveReference field.
func (r *mutationResolver) ApproveReference(ctx context.Context, uuid string, approved *bool) (*model.Reference, error) {
	panic(fmt.Errorf("not implemented: ApproveReference - approveReference"))
}

// CreatePhone is the resolver for the createPhone field.
func (r *mutationResolver) CreatePhone(ctx context.Context, number string, typeArg *model.PhoneType, extension *string, adminUUID *string, referenceUUID *string) (*model.Phone, error) {
	panic(fmt.Errorf("not implemented: CreatePhone - createPhone"))
}

// UpdatePhone is the resolver for the updatePhone field.
func (r *mutationResolver) UpdatePhone(ctx context.Context, id int, typeArg *model.PhoneType, number *string, extension *string) (*model.Phone, error) {
	panic(fmt.Errorf("not implemented: UpdatePhone - updatePhone"))
}

// DeletePhone is the resolver for the deletePhone field.
func (r *mutationResolver) DeletePhone(ctx context.Context, id int) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePhone - deletePhone"))
}

// CreateEmail is the resolver for the createEmail field.
func (r *mutationResolver) CreateEmail(ctx context.Context, address string, typeArg *model.EmailType, adminUUID *string, referenceUUID *string) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: CreateEmail - createEmail"))
}

// UpdateEmail is the resolver for the updateEmail field.
func (r *mutationResolver) UpdateEmail(ctx context.Context, id int, typeArg *model.EmailType, address *string) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: UpdateEmail - updateEmail"))
}

// DeleteEmail is the resolver for the deleteEmail field.
func (r *mutationResolver) DeleteEmail(ctx context.Context, id int) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEmail - deleteEmail"))
}

// CreateJob is the resolver for the createJob field.
func (r *mutationResolver) CreateJob(ctx context.Context, company *string, address *model.AddressInput, title *string, duties *string, from *model.MonthYearInput, to *model.MonthYearInput) (*model.Job, error) {
	panic(fmt.Errorf("not implemented: CreateJob - createJob"))
}

// UpdateJob is the resolver for the updateJob field.
func (r *mutationResolver) UpdateJob(ctx context.Context, id int, company *string, address *model.AddressInput, title *string, duties *string, from *model.MonthYearInput, to *model.MonthYearInput) (*model.Job, error) {
	panic(fmt.Errorf("not implemented: UpdateJob - updateJob"))
}

// DeleteJob is the resolver for the deleteJob field.
func (r *mutationResolver) DeleteJob(ctx context.Context, id int) (*model.Job, error) {
	panic(fmt.Errorf("not implemented: DeleteJob - deleteJob"))
}

// CreateSchool is the resolver for the createSchool field.
func (r *mutationResolver) CreateSchool(ctx context.Context, name *string, address *model.AddressInput, degree *string, from *model.MonthYearInput, to *model.MonthYearInput) (*model.School, error) {
	panic(fmt.Errorf("not implemented: CreateSchool - createSchool"))
}

// UpdateSchool is the resolver for the updateSchool field.
func (r *mutationResolver) UpdateSchool(ctx context.Context, id int, name *string, address *model.AddressInput, degree *string, from *model.MonthYearInput, to *model.MonthYearInput) (*model.School, error) {
	panic(fmt.Errorf("not implemented: UpdateSchool - updateSchool"))
}

// DeleteSchool is the resolver for the deleteSchool field.
func (r *mutationResolver) DeleteSchool(ctx context.Context, id int) (*model.School, error) {
	panic(fmt.Errorf("not implemented: DeleteSchool - deleteSchool"))
}

// CreateParameter is the resolver for the createParameter field.
func (r *mutationResolver) CreateParameter(ctx context.Context, key *string, value *string) (*model.Parameter, error) {
	panic(fmt.Errorf("not implemented: CreateParameter - createParameter"))
}

// UpdateParameter is the resolver for the updateParameter field.
func (r *mutationResolver) UpdateParameter(ctx context.Context, id int, key *string, value *string) (*model.Parameter, error) {
	panic(fmt.Errorf("not implemented: UpdateParameter - updateParameter"))
}

// DeleteParameter is the resolver for the deleteParameter field.
func (r *mutationResolver) DeleteParameter(ctx context.Context, id int) (*model.Parameter, error) {
	panic(fmt.Errorf("not implemented: DeleteParameter - deleteParameter"))
}

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, url *string, title *string, description *string, typeArg *model.LinkType, parameters []*model.ParameterInput) (*model.Link, error) {
	panic(fmt.Errorf("not implemented: CreateLink - createLink"))
}

// UpdateLink is the resolver for the updateLink field.
func (r *mutationResolver) UpdateLink(ctx context.Context, id int, url *string, title *string, description *string, typeArg *model.LinkType, parameters []*model.ParameterInput) (*model.Link, error) {
	panic(fmt.Errorf("not implemented: UpdateLink - updateLink"))
}

// DeleteLink is the resolver for the deleteLink field.
func (r *mutationResolver) DeleteLink(ctx context.Context, id int) (*model.Link, error) {
	panic(fmt.Errorf("not implemented: DeleteLink - deleteLink"))
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, typeArg *model.CommentType, message *string, adminUUID *string, referenceUUID *string, visitorUUID *string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CreateComment - createComment"))
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, id int, typeArg *model.CommentType, message *string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: UpdateComment - updateComment"))
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id int) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: DeleteComment - deleteComment"))
}

// ApproveComment is the resolver for the approveComment field.
func (r *mutationResolver) ApproveComment(ctx context.Context, id int, approved *bool) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: ApproveComment - approveComment"))
}

// CreateAdmin is the resolver for the createAdmin field.
func (r *mutationResolver) CreateAdmin(ctx context.Context, name *model.NameInput, credentials *model.CredentialsInput, address *model.AddressInput, phones []*model.PhoneInput, emails []*model.EmailInput) (*model.Admin, error) {
	panic(fmt.Errorf("not implemented: CreateAdmin - createAdmin"))
}

// UpdateAdmin is the resolver for the updateAdmin field.
func (r *mutationResolver) UpdateAdmin(ctx context.Context, uuid string, name *model.NameInput, credentials *model.CredentialsInput, address *model.AddressInput, phones []*model.PhoneInput, emails []*model.EmailInput) (*model.Admin, error) {
	panic(fmt.Errorf("not implemented: UpdateAdmin - updateAdmin"))
}

// DeleteAdmin is the resolver for the deleteAdmin field.
func (r *mutationResolver) DeleteAdmin(ctx context.Context, uuid string) (*model.Admin, error) {
	panic(fmt.Errorf("not implemented: DeleteAdmin - deleteAdmin"))
}

// CreateVisitor is the resolver for the createVisitor field.
func (r *mutationResolver) CreateVisitor(ctx context.Context, name *model.NameInput, credentials *model.CredentialsInput, email *string) (*model.Visitor, error) {
	panic(fmt.Errorf("not implemented: CreateVisitor - createVisitor"))
}

// UpdateVisitor is the resolver for the updateVisitor field.
func (r *mutationResolver) UpdateVisitor(ctx context.Context, uuid string, name *model.NameInput, address *model.AddressInput, credentials *model.CredentialsInput, email *string) (*model.Visitor, error) {
	panic(fmt.Errorf("not implemented: UpdateVisitor - updateVisitor"))
}

// DeleteVisitor is the resolver for the deleteVisitor field.
func (r *mutationResolver) DeleteVisitor(ctx context.Context, uuid string) (*model.Visitor, error) {
	panic(fmt.Errorf("not implemented: DeleteVisitor - deleteVisitor"))
}

// CreatePage is the resolver for the createPage field.
func (r *mutationResolver) CreatePage(ctx context.Context, name string, content *string) (*model.Page, error) {
	panic(fmt.Errorf("not implemented: CreatePage - createPage"))
}

// UpdatePage is the resolver for the updatePage field.
func (r *mutationResolver) UpdatePage(ctx context.Context, name string, content *string) (*model.Page, error) {
	panic(fmt.Errorf("not implemented: UpdatePage - updatePage"))
}

// DeletePage is the resolver for the deletePage field.
func (r *mutationResolver) DeletePage(ctx context.Context, name string) (*model.Page, error) {
	panic(fmt.Errorf("not implemented: DeletePage - deletePage"))
}

// CreateContact is the resolver for the createContact field.
func (r *mutationResolver) CreateContact(ctx context.Context, name *model.NameInput, address *model.AddressInput, emailType *model.EmailType, email *string, phoneType *model.PhoneType, phone *string, preferred *model.PreferredContact, subject *string, message *string) (*model.Contact, error) {
	panic(fmt.Errorf("not implemented: CreateContact - createContact"))
}

// UpdateContact is the resolver for the updateContact field.
func (r *mutationResolver) UpdateContact(ctx context.Context, id int, name *model.NameInput, address *model.AddressInput, emailType *model.EmailType, email *string, phoneType *model.PhoneType, phone *string, preferred *model.PreferredContact, subject *string, message *string) (*model.Contact, error) {
	panic(fmt.Errorf("not implemented: UpdateContact - updateContact"))
}

// DeleteContact is the resolver for the deleteContact field.
func (r *mutationResolver) DeleteContact(ctx context.Context, id int) (*model.Contact, error) {
	panic(fmt.Errorf("not implemented: DeleteContact - deleteContact"))
}

// LoginVisitor is the resolver for the loginVisitor field.
func (r *mutationResolver) LoginVisitor(ctx context.Context, username *string, password *string) (*model.Auth, error) {
	panic(fmt.Errorf("not implemented: LoginVisitor - loginVisitor"))
}

// LoginReference is the resolver for the loginReference field.
func (r *mutationResolver) LoginReference(ctx context.Context, username *string, password *string) (*model.Auth, error) {
	panic(fmt.Errorf("not implemented: LoginReference - loginReference"))
}

// LoginAdmin is the resolver for the loginAdmin field.
func (r *mutationResolver) LoginAdmin(ctx context.Context, username *string, password *string) (*model.Auth, error) {
	panic(fmt.Errorf("not implemented: LoginAdmin - loginAdmin"))
}

// GetReferences is the resolver for the getReferences field.
func (r *queryResolver) GetReferences(ctx context.Context, isDeleted *bool, limit *int, offset *int, approved *bool) ([]*model.Reference, error) {
	panic(fmt.Errorf("not implemented: GetReferences - getReferences"))
}

// ShowReference is the resolver for the showReference field.
func (r *queryResolver) ShowReference(ctx context.Context, uuid string) (*model.Reference, error) {
	panic(fmt.Errorf("not implemented: ShowReference - showReference"))
}

// GetPhones is the resolver for the getPhones field.
func (r *queryResolver) GetPhones(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Phone, error) {
	panic(fmt.Errorf("not implemented: GetPhones - getPhones"))
}

// ShowPhone is the resolver for the showPhone field.
func (r *queryResolver) ShowPhone(ctx context.Context, id int) (*model.Phone, error) {
	panic(fmt.Errorf("not implemented: ShowPhone - showPhone"))
}

// GetEmails is the resolver for the getEmails field.
func (r *queryResolver) GetEmails(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Email, error) {
	panic(fmt.Errorf("not implemented: GetEmails - getEmails"))
}

// ShowEmail is the resolver for the showEmail field.
func (r *queryResolver) ShowEmail(ctx context.Context, id int) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: ShowEmail - showEmail"))
}

// GetJobs is the resolver for the getJobs field.
func (r *queryResolver) GetJobs(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Job, error) {
	panic(fmt.Errorf("not implemented: GetJobs - getJobs"))
}

// ShowJob is the resolver for the showJob field.
func (r *queryResolver) ShowJob(ctx context.Context, id int) (*model.Job, error) {
	panic(fmt.Errorf("not implemented: ShowJob - showJob"))
}

// GetSchools is the resolver for the getSchools field.
func (r *queryResolver) GetSchools(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.School, error) {
	panic(fmt.Errorf("not implemented: GetSchools - getSchools"))
}

// ShowSchool is the resolver for the showSchool field.
func (r *queryResolver) ShowSchool(ctx context.Context, id int) (*model.School, error) {
	panic(fmt.Errorf("not implemented: ShowSchool - showSchool"))
}

// GetParameters is the resolver for the getParameters field.
func (r *queryResolver) GetParameters(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Parameter, error) {
	panic(fmt.Errorf("not implemented: GetParameters - getParameters"))
}

// ShowParameter is the resolver for the showParameter field.
func (r *queryResolver) ShowParameter(ctx context.Context, id int) (*model.Parameter, error) {
	panic(fmt.Errorf("not implemented: ShowParameter - showParameter"))
}

// GetLinks is the resolver for the getLinks field.
func (r *queryResolver) GetLinks(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Link, error) {
	panic(fmt.Errorf("not implemented: GetLinks - getLinks"))
}

// ShowLink is the resolver for the showLink field.
func (r *queryResolver) ShowLink(ctx context.Context, id int) (*model.Link, error) {
	panic(fmt.Errorf("not implemented: ShowLink - showLink"))
}

// GetComments is the resolver for the getComments field.
func (r *queryResolver) GetComments(ctx context.Context, isDeleted *bool, limit *int, offset *int, approved *bool) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: GetComments - getComments"))
}

// ShowComment is the resolver for the showComment field.
func (r *queryResolver) ShowComment(ctx context.Context, id int) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: ShowComment - showComment"))
}

// ShowAdmin is the resolver for the showAdmin field.
func (r *queryResolver) ShowAdmin(ctx context.Context, uuid string) (*model.Admin, error) {
	panic(fmt.Errorf("not implemented: ShowAdmin - showAdmin"))
}

// GetVisitors is the resolver for the getVisitors field.
func (r *queryResolver) GetVisitors(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Visitor, error) {
	panic(fmt.Errorf("not implemented: GetVisitors - getVisitors"))
}

// ShowVisitor is the resolver for the showVisitor field.
func (r *queryResolver) ShowVisitor(ctx context.Context, uuid string) (*model.Visitor, error) {
	panic(fmt.Errorf("not implemented: ShowVisitor - showVisitor"))
}

// GetPages is the resolver for the getPages field.
func (r *queryResolver) GetPages(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Page, error) {
	panic(fmt.Errorf("not implemented: GetPages - getPages"))
}

// ShowPage is the resolver for the showPage field.
func (r *queryResolver) ShowPage(ctx context.Context, name string) (*model.Page, error) {
	panic(fmt.Errorf("not implemented: ShowPage - showPage"))
}

// GetContacts is the resolver for the getContacts field.
func (r *queryResolver) GetContacts(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Contact, error) {
	panic(fmt.Errorf("not implemented: GetContacts - getContacts"))
}

// ShowContact is the resolver for the showContact field.
func (r *queryResolver) ShowContact(ctx context.Context, id int) (*model.Contact, error) {
	panic(fmt.Errorf("not implemented: ShowContact - showContact"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
