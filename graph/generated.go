// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/rossi-jeff/go-resume-graphql/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Address struct {
		Address func(childComplexity int) int
		City    func(childComplexity int) int
		State   func(childComplexity int) int
		Suite   func(childComplexity int) int
		Zip     func(childComplexity int) int
	}

	Admin struct {
		Address     func(childComplexity int) int
		Comments    func(childComplexity int) int
		Created     func(childComplexity int) int
		Credentials func(childComplexity int) int
		Emails      func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDeleted   func(childComplexity int) int
		Name        func(childComplexity int) int
		Phones      func(childComplexity int) int
		UUID        func(childComplexity int) int
		Updated     func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	Auth struct {
		Class func(childComplexity int) int
		Token func(childComplexity int) int
		UUID  func(childComplexity int) int
	}

	Comment struct {
		Admins     func(childComplexity int) int
		Approved   func(childComplexity int) int
		Created    func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDeleted  func(childComplexity int) int
		Message    func(childComplexity int) int
		References func(childComplexity int) int
		Type       func(childComplexity int) int
		Updated    func(childComplexity int) int
		Version    func(childComplexity int) int
		Visitors   func(childComplexity int) int
	}

	Contact struct {
		Address   func(childComplexity int) int
		Created   func(childComplexity int) int
		Email     func(childComplexity int) int
		EmailType func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Message   func(childComplexity int) int
		Name      func(childComplexity int) int
		Phone     func(childComplexity int) int
		PhoneType func(childComplexity int) int
		Preferred func(childComplexity int) int
		Subject   func(childComplexity int) int
		Updated   func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	Credentials struct {
		Username func(childComplexity int) int
	}

	Email struct {
		Address   func(childComplexity int) int
		Created   func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Type      func(childComplexity int) int
		Updated   func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	Job struct {
		Address   func(childComplexity int) int
		Company   func(childComplexity int) int
		Created   func(childComplexity int) int
		Duties    func(childComplexity int) int
		From      func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Title     func(childComplexity int) int
		To        func(childComplexity int) int
		Updated   func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	Link struct {
		Created     func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDeleted   func(childComplexity int) int
		Parameters  func(childComplexity int) int
		Title       func(childComplexity int) int
		Type        func(childComplexity int) int
		URL         func(childComplexity int) int
		Updated     func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	MonthYear struct {
		Month func(childComplexity int) int
		Year  func(childComplexity int) int
	}

	Mutation struct {
		ApproveComment   func(childComplexity int, id int, approved *bool) int
		ApproveReference func(childComplexity int, uuid string, approved *bool) int
		CreateAdmin      func(childComplexity int, name *model.NameInput, credentials *model.CredentialsInput, address *model.AddressInput, phones []*model.PhoneInput, emails []*model.EmailInput) int
		CreateComment    func(childComplexity int, typeArg *model.CommentType, message *string, adminUUID *string, referenceUUID *string, visitorUUID *string) int
		CreateContact    func(childComplexity int, name *model.NameInput, address *model.AddressInput, emailType *model.EmailType, email *string, phoneType *model.PhoneType, phone *string, preferred *model.PreferredContact, subject *string, message *string) int
		CreateEmail      func(childComplexity int, address string, typeArg *model.EmailType, adminUUID *string, referenceUUID *string) int
		CreateJob        func(childComplexity int, company *string, address *model.AddressInput, title *string, duties *string, from *model.MonthYearInput, to *model.MonthYearInput) int
		CreateLink       func(childComplexity int, url *string, title *string, description *string, typeArg *model.LinkType, parameters []*model.ParameterInput) int
		CreatePage       func(childComplexity int, name string, content *string) int
		CreateParameter  func(childComplexity int, key *string, value *string) int
		CreatePhone      func(childComplexity int, number string, typeArg *model.PhoneType, extension *string, adminUUID *string, referenceUUID *string) int
		CreateReference  func(childComplexity int, name *model.NameInput, address *model.AddressInput, title *string, company *string, phones []*model.PhoneInput, emails []*model.EmailInput, credentials *model.CredentialsInput) int
		CreateSchool     func(childComplexity int, name *string, address *model.AddressInput, degree *string, from *model.MonthYearInput, to *model.MonthYearInput) int
		CreateVisitor    func(childComplexity int, name *model.NameInput, credentials *model.CredentialsInput, email *string) int
		DeleteAdmin      func(childComplexity int, uuid string) int
		DeleteComment    func(childComplexity int, id int) int
		DeleteContact    func(childComplexity int, id int) int
		DeleteEmail      func(childComplexity int, id int) int
		DeleteJob        func(childComplexity int, id int) int
		DeleteLink       func(childComplexity int, id int) int
		DeletePage       func(childComplexity int, name string) int
		DeleteParameter  func(childComplexity int, id int) int
		DeletePhone      func(childComplexity int, id int) int
		DeleteReference  func(childComplexity int, uuid string) int
		DeleteSchool     func(childComplexity int, id int) int
		DeleteVisitor    func(childComplexity int, uuid string) int
		LoginAdmin       func(childComplexity int, username *string, password *string) int
		LoginReference   func(childComplexity int, username *string, password *string) int
		LoginVisitor     func(childComplexity int, username *string, password *string) int
		UpdateAdmin      func(childComplexity int, uuid string, name *model.NameInput, credentials *model.CredentialsInput, address *model.AddressInput, phones []*model.PhoneInput, emails []*model.EmailInput) int
		UpdateComment    func(childComplexity int, id int, typeArg *model.CommentType, message *string) int
		UpdateContact    func(childComplexity int, id int, name *model.NameInput, address *model.AddressInput, emailType *model.EmailType, email *string, phoneType *model.PhoneType, phone *string, preferred *model.PreferredContact, subject *string, message *string) int
		UpdateEmail      func(childComplexity int, id int, typeArg *model.EmailType, address *string) int
		UpdateJob        func(childComplexity int, id int, company *string, address *model.AddressInput, title *string, duties *string, from *model.MonthYearInput, to *model.MonthYearInput) int
		UpdateLink       func(childComplexity int, id int, url *string, title *string, description *string, typeArg *model.LinkType, parameters []*model.ParameterInput) int
		UpdatePage       func(childComplexity int, name string, content *string) int
		UpdateParameter  func(childComplexity int, id int, key *string, value *string) int
		UpdatePhone      func(childComplexity int, id int, typeArg *model.PhoneType, number *string, extension *string) int
		UpdateReference  func(childComplexity int, uuid string, name *model.NameInput, address *model.AddressInput, title *string, company *string, phones []*model.PhoneInput, emails []*model.EmailInput, credentials *model.CredentialsInput) int
		UpdateSchool     func(childComplexity int, id int, name *string, address *model.AddressInput, degree *string, from *model.MonthYearInput, to *model.MonthYearInput) int
		UpdateVisitor    func(childComplexity int, uuid string, name *model.NameInput, address *model.AddressInput, credentials *model.CredentialsInput, email *string) int
	}

	Name struct {
		First      func(childComplexity int) int
		Last       func(childComplexity int) int
		Middle     func(childComplexity int) int
		Salutation func(childComplexity int) int
		Suffix     func(childComplexity int) int
	}

	Page struct {
		Content   func(childComplexity int) int
		Created   func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Name      func(childComplexity int) int
		Updated   func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	Parameter struct {
		Created   func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Key       func(childComplexity int) int
		Updated   func(childComplexity int) int
		Value     func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	Phone struct {
		Created   func(childComplexity int) int
		Extension func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Number    func(childComplexity int) int
		Type      func(childComplexity int) int
		Updated   func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	Query struct {
		GetComments   func(childComplexity int, isDeleted *bool, limit *int, offset *int, approved *bool) int
		GetContacts   func(childComplexity int, limit *int, offset *int, isDeleted *bool) int
		GetEmails     func(childComplexity int, limit *int, offset *int, isDeleted *bool) int
		GetJobs       func(childComplexity int, limit *int, offset *int, isDeleted *bool) int
		GetLinks      func(childComplexity int, limit *int, offset *int, isDeleted *bool) int
		GetPages      func(childComplexity int, limit *int, offset *int, isDeleted *bool) int
		GetParameters func(childComplexity int, limit *int, offset *int, isDeleted *bool) int
		GetPhones     func(childComplexity int, limit *int, offset *int, isDeleted *bool) int
		GetReferences func(childComplexity int, isDeleted *bool, limit *int, offset *int, approved *bool) int
		GetSchools    func(childComplexity int, limit *int, offset *int, isDeleted *bool) int
		GetVisitors   func(childComplexity int, limit *int, offset *int, isDeleted *bool) int
		ShowAdmin     func(childComplexity int, uuid string) int
		ShowComment   func(childComplexity int, id int) int
		ShowContact   func(childComplexity int, id int) int
		ShowEmail     func(childComplexity int, id int) int
		ShowJob       func(childComplexity int, id int) int
		ShowLink      func(childComplexity int, id int) int
		ShowPage      func(childComplexity int, name string) int
		ShowParameter func(childComplexity int, id int) int
		ShowPhone     func(childComplexity int, id int) int
		ShowReference func(childComplexity int, uuid string) int
		ShowSchool    func(childComplexity int, id int) int
		ShowVisitor   func(childComplexity int, uuid string) int
	}

	Reference struct {
		Address     func(childComplexity int) int
		Approved    func(childComplexity int) int
		Comments    func(childComplexity int) int
		Company     func(childComplexity int) int
		Created     func(childComplexity int) int
		Credentials func(childComplexity int) int
		Emails      func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDeleted   func(childComplexity int) int
		Name        func(childComplexity int) int
		Phones      func(childComplexity int) int
		Title       func(childComplexity int) int
		UUID        func(childComplexity int) int
		Updated     func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	School struct {
		Address   func(childComplexity int) int
		Created   func(childComplexity int) int
		Degree    func(childComplexity int) int
		From      func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDeleted func(childComplexity int) int
		Name      func(childComplexity int) int
		Program   func(childComplexity int) int
		To        func(childComplexity int) int
		Updated   func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	Visitor struct {
		Approved    func(childComplexity int) int
		Created     func(childComplexity int) int
		Credentials func(childComplexity int) int
		Email       func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDeleted   func(childComplexity int) int
		Name        func(childComplexity int) int
		UUID        func(childComplexity int) int
		Updated     func(childComplexity int) int
		Version     func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateReference(ctx context.Context, name *model.NameInput, address *model.AddressInput, title *string, company *string, phones []*model.PhoneInput, emails []*model.EmailInput, credentials *model.CredentialsInput) (*model.Reference, error)
	UpdateReference(ctx context.Context, uuid string, name *model.NameInput, address *model.AddressInput, title *string, company *string, phones []*model.PhoneInput, emails []*model.EmailInput, credentials *model.CredentialsInput) (*model.Reference, error)
	DeleteReference(ctx context.Context, uuid string) (*model.Reference, error)
	ApproveReference(ctx context.Context, uuid string, approved *bool) (*model.Reference, error)
	CreatePhone(ctx context.Context, number string, typeArg *model.PhoneType, extension *string, adminUUID *string, referenceUUID *string) (*model.Phone, error)
	UpdatePhone(ctx context.Context, id int, typeArg *model.PhoneType, number *string, extension *string) (*model.Phone, error)
	DeletePhone(ctx context.Context, id int) (bool, error)
	CreateEmail(ctx context.Context, address string, typeArg *model.EmailType, adminUUID *string, referenceUUID *string) (*model.Email, error)
	UpdateEmail(ctx context.Context, id int, typeArg *model.EmailType, address *string) (*model.Email, error)
	DeleteEmail(ctx context.Context, id int) (bool, error)
	CreateJob(ctx context.Context, company *string, address *model.AddressInput, title *string, duties *string, from *model.MonthYearInput, to *model.MonthYearInput) (*model.Job, error)
	UpdateJob(ctx context.Context, id int, company *string, address *model.AddressInput, title *string, duties *string, from *model.MonthYearInput, to *model.MonthYearInput) (*model.Job, error)
	DeleteJob(ctx context.Context, id int) (*model.Job, error)
	CreateSchool(ctx context.Context, name *string, address *model.AddressInput, degree *string, from *model.MonthYearInput, to *model.MonthYearInput) (*model.School, error)
	UpdateSchool(ctx context.Context, id int, name *string, address *model.AddressInput, degree *string, from *model.MonthYearInput, to *model.MonthYearInput) (*model.School, error)
	DeleteSchool(ctx context.Context, id int) (*model.School, error)
	CreateParameter(ctx context.Context, key *string, value *string) (*model.Parameter, error)
	UpdateParameter(ctx context.Context, id int, key *string, value *string) (*model.Parameter, error)
	DeleteParameter(ctx context.Context, id int) (*model.Parameter, error)
	CreateLink(ctx context.Context, url *string, title *string, description *string, typeArg *model.LinkType, parameters []*model.ParameterInput) (*model.Link, error)
	UpdateLink(ctx context.Context, id int, url *string, title *string, description *string, typeArg *model.LinkType, parameters []*model.ParameterInput) (*model.Link, error)
	DeleteLink(ctx context.Context, id int) (*model.Link, error)
	CreateComment(ctx context.Context, typeArg *model.CommentType, message *string, adminUUID *string, referenceUUID *string, visitorUUID *string) (*model.Comment, error)
	UpdateComment(ctx context.Context, id int, typeArg *model.CommentType, message *string) (*model.Comment, error)
	DeleteComment(ctx context.Context, id int) (*model.Comment, error)
	ApproveComment(ctx context.Context, id int, approved *bool) (*model.Comment, error)
	CreateAdmin(ctx context.Context, name *model.NameInput, credentials *model.CredentialsInput, address *model.AddressInput, phones []*model.PhoneInput, emails []*model.EmailInput) (*model.Admin, error)
	UpdateAdmin(ctx context.Context, uuid string, name *model.NameInput, credentials *model.CredentialsInput, address *model.AddressInput, phones []*model.PhoneInput, emails []*model.EmailInput) (*model.Admin, error)
	DeleteAdmin(ctx context.Context, uuid string) (*model.Admin, error)
	CreateVisitor(ctx context.Context, name *model.NameInput, credentials *model.CredentialsInput, email *string) (*model.Visitor, error)
	UpdateVisitor(ctx context.Context, uuid string, name *model.NameInput, address *model.AddressInput, credentials *model.CredentialsInput, email *string) (*model.Visitor, error)
	DeleteVisitor(ctx context.Context, uuid string) (*model.Visitor, error)
	CreatePage(ctx context.Context, name string, content *string) (*model.Page, error)
	UpdatePage(ctx context.Context, name string, content *string) (*model.Page, error)
	DeletePage(ctx context.Context, name string) (*model.Page, error)
	CreateContact(ctx context.Context, name *model.NameInput, address *model.AddressInput, emailType *model.EmailType, email *string, phoneType *model.PhoneType, phone *string, preferred *model.PreferredContact, subject *string, message *string) (*model.Contact, error)
	UpdateContact(ctx context.Context, id int, name *model.NameInput, address *model.AddressInput, emailType *model.EmailType, email *string, phoneType *model.PhoneType, phone *string, preferred *model.PreferredContact, subject *string, message *string) (*model.Contact, error)
	DeleteContact(ctx context.Context, id int) (*model.Contact, error)
	LoginVisitor(ctx context.Context, username *string, password *string) (*model.Auth, error)
	LoginReference(ctx context.Context, username *string, password *string) (*model.Auth, error)
	LoginAdmin(ctx context.Context, username *string, password *string) (*model.Auth, error)
}
type QueryResolver interface {
	GetReferences(ctx context.Context, isDeleted *bool, limit *int, offset *int, approved *bool) ([]*model.Reference, error)
	ShowReference(ctx context.Context, uuid string) (*model.Reference, error)
	GetPhones(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Phone, error)
	ShowPhone(ctx context.Context, id int) (*model.Phone, error)
	GetEmails(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Email, error)
	ShowEmail(ctx context.Context, id int) (*model.Email, error)
	GetJobs(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Job, error)
	ShowJob(ctx context.Context, id int) (*model.Job, error)
	GetSchools(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.School, error)
	ShowSchool(ctx context.Context, id int) (*model.School, error)
	GetParameters(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Parameter, error)
	ShowParameter(ctx context.Context, id int) (*model.Parameter, error)
	GetLinks(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Link, error)
	ShowLink(ctx context.Context, id int) (*model.Link, error)
	GetComments(ctx context.Context, isDeleted *bool, limit *int, offset *int, approved *bool) ([]*model.Comment, error)
	ShowComment(ctx context.Context, id int) (*model.Comment, error)
	ShowAdmin(ctx context.Context, uuid string) (*model.Admin, error)
	GetVisitors(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Visitor, error)
	ShowVisitor(ctx context.Context, uuid string) (*model.Visitor, error)
	GetPages(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Page, error)
	ShowPage(ctx context.Context, name string) (*model.Page, error)
	GetContacts(ctx context.Context, limit *int, offset *int, isDeleted *bool) ([]*model.Contact, error)
	ShowContact(ctx context.Context, id int) (*model.Contact, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Address.Address":
		if e.complexity.Address.Address == nil {
			break
		}

		return e.complexity.Address.Address(childComplexity), true

	case "Address.City":
		if e.complexity.Address.City == nil {
			break
		}

		return e.complexity.Address.City(childComplexity), true

	case "Address.State":
		if e.complexity.Address.State == nil {
			break
		}

		return e.complexity.Address.State(childComplexity), true

	case "Address.Suite":
		if e.complexity.Address.Suite == nil {
			break
		}

		return e.complexity.Address.Suite(childComplexity), true

	case "Address.Zip":
		if e.complexity.Address.Zip == nil {
			break
		}

		return e.complexity.Address.Zip(childComplexity), true

	case "Admin.Address":
		if e.complexity.Admin.Address == nil {
			break
		}

		return e.complexity.Admin.Address(childComplexity), true

	case "Admin.Comments":
		if e.complexity.Admin.Comments == nil {
			break
		}

		return e.complexity.Admin.Comments(childComplexity), true

	case "Admin.Created":
		if e.complexity.Admin.Created == nil {
			break
		}

		return e.complexity.Admin.Created(childComplexity), true

	case "Admin.Credentials":
		if e.complexity.Admin.Credentials == nil {
			break
		}

		return e.complexity.Admin.Credentials(childComplexity), true

	case "Admin.Emails":
		if e.complexity.Admin.Emails == nil {
			break
		}

		return e.complexity.Admin.Emails(childComplexity), true

	case "Admin.Id":
		if e.complexity.Admin.ID == nil {
			break
		}

		return e.complexity.Admin.ID(childComplexity), true

	case "Admin.IsDeleted":
		if e.complexity.Admin.IsDeleted == nil {
			break
		}

		return e.complexity.Admin.IsDeleted(childComplexity), true

	case "Admin.Name":
		if e.complexity.Admin.Name == nil {
			break
		}

		return e.complexity.Admin.Name(childComplexity), true

	case "Admin.Phones":
		if e.complexity.Admin.Phones == nil {
			break
		}

		return e.complexity.Admin.Phones(childComplexity), true

	case "Admin.UUID":
		if e.complexity.Admin.UUID == nil {
			break
		}

		return e.complexity.Admin.UUID(childComplexity), true

	case "Admin.Updated":
		if e.complexity.Admin.Updated == nil {
			break
		}

		return e.complexity.Admin.Updated(childComplexity), true

	case "Admin.Version":
		if e.complexity.Admin.Version == nil {
			break
		}

		return e.complexity.Admin.Version(childComplexity), true

	case "Auth.Class":
		if e.complexity.Auth.Class == nil {
			break
		}

		return e.complexity.Auth.Class(childComplexity), true

	case "Auth.Token":
		if e.complexity.Auth.Token == nil {
			break
		}

		return e.complexity.Auth.Token(childComplexity), true

	case "Auth.UUID":
		if e.complexity.Auth.UUID == nil {
			break
		}

		return e.complexity.Auth.UUID(childComplexity), true

	case "Comment.Admins":
		if e.complexity.Comment.Admins == nil {
			break
		}

		return e.complexity.Comment.Admins(childComplexity), true

	case "Comment.Approved":
		if e.complexity.Comment.Approved == nil {
			break
		}

		return e.complexity.Comment.Approved(childComplexity), true

	case "Comment.Created":
		if e.complexity.Comment.Created == nil {
			break
		}

		return e.complexity.Comment.Created(childComplexity), true

	case "Comment.Id":
		if e.complexity.Comment.ID == nil {
			break
		}

		return e.complexity.Comment.ID(childComplexity), true

	case "Comment.IsDeleted":
		if e.complexity.Comment.IsDeleted == nil {
			break
		}

		return e.complexity.Comment.IsDeleted(childComplexity), true

	case "Comment.Message":
		if e.complexity.Comment.Message == nil {
			break
		}

		return e.complexity.Comment.Message(childComplexity), true

	case "Comment.References":
		if e.complexity.Comment.References == nil {
			break
		}

		return e.complexity.Comment.References(childComplexity), true

	case "Comment.Type":
		if e.complexity.Comment.Type == nil {
			break
		}

		return e.complexity.Comment.Type(childComplexity), true

	case "Comment.Updated":
		if e.complexity.Comment.Updated == nil {
			break
		}

		return e.complexity.Comment.Updated(childComplexity), true

	case "Comment.Version":
		if e.complexity.Comment.Version == nil {
			break
		}

		return e.complexity.Comment.Version(childComplexity), true

	case "Comment.Visitors":
		if e.complexity.Comment.Visitors == nil {
			break
		}

		return e.complexity.Comment.Visitors(childComplexity), true

	case "Contact.Address":
		if e.complexity.Contact.Address == nil {
			break
		}

		return e.complexity.Contact.Address(childComplexity), true

	case "Contact.Created":
		if e.complexity.Contact.Created == nil {
			break
		}

		return e.complexity.Contact.Created(childComplexity), true

	case "Contact.Email":
		if e.complexity.Contact.Email == nil {
			break
		}

		return e.complexity.Contact.Email(childComplexity), true

	case "Contact.EmailType":
		if e.complexity.Contact.EmailType == nil {
			break
		}

		return e.complexity.Contact.EmailType(childComplexity), true

	case "Contact.Id":
		if e.complexity.Contact.ID == nil {
			break
		}

		return e.complexity.Contact.ID(childComplexity), true

	case "Contact.IsDeleted":
		if e.complexity.Contact.IsDeleted == nil {
			break
		}

		return e.complexity.Contact.IsDeleted(childComplexity), true

	case "Contact.Message":
		if e.complexity.Contact.Message == nil {
			break
		}

		return e.complexity.Contact.Message(childComplexity), true

	case "Contact.Name":
		if e.complexity.Contact.Name == nil {
			break
		}

		return e.complexity.Contact.Name(childComplexity), true

	case "Contact.Phone":
		if e.complexity.Contact.Phone == nil {
			break
		}

		return e.complexity.Contact.Phone(childComplexity), true

	case "Contact.PhoneType":
		if e.complexity.Contact.PhoneType == nil {
			break
		}

		return e.complexity.Contact.PhoneType(childComplexity), true

	case "Contact.Preferred":
		if e.complexity.Contact.Preferred == nil {
			break
		}

		return e.complexity.Contact.Preferred(childComplexity), true

	case "Contact.Subject":
		if e.complexity.Contact.Subject == nil {
			break
		}

		return e.complexity.Contact.Subject(childComplexity), true

	case "Contact.Updated":
		if e.complexity.Contact.Updated == nil {
			break
		}

		return e.complexity.Contact.Updated(childComplexity), true

	case "Contact.Version":
		if e.complexity.Contact.Version == nil {
			break
		}

		return e.complexity.Contact.Version(childComplexity), true

	case "Credentials.Username":
		if e.complexity.Credentials.Username == nil {
			break
		}

		return e.complexity.Credentials.Username(childComplexity), true

	case "Email.Address":
		if e.complexity.Email.Address == nil {
			break
		}

		return e.complexity.Email.Address(childComplexity), true

	case "Email.Created":
		if e.complexity.Email.Created == nil {
			break
		}

		return e.complexity.Email.Created(childComplexity), true

	case "Email.Id":
		if e.complexity.Email.ID == nil {
			break
		}

		return e.complexity.Email.ID(childComplexity), true

	case "Email.IsDeleted":
		if e.complexity.Email.IsDeleted == nil {
			break
		}

		return e.complexity.Email.IsDeleted(childComplexity), true

	case "Email.Type":
		if e.complexity.Email.Type == nil {
			break
		}

		return e.complexity.Email.Type(childComplexity), true

	case "Email.Updated":
		if e.complexity.Email.Updated == nil {
			break
		}

		return e.complexity.Email.Updated(childComplexity), true

	case "Email.Version":
		if e.complexity.Email.Version == nil {
			break
		}

		return e.complexity.Email.Version(childComplexity), true

	case "Job.Address":
		if e.complexity.Job.Address == nil {
			break
		}

		return e.complexity.Job.Address(childComplexity), true

	case "Job.Company":
		if e.complexity.Job.Company == nil {
			break
		}

		return e.complexity.Job.Company(childComplexity), true

	case "Job.Created":
		if e.complexity.Job.Created == nil {
			break
		}

		return e.complexity.Job.Created(childComplexity), true

	case "Job.Duties":
		if e.complexity.Job.Duties == nil {
			break
		}

		return e.complexity.Job.Duties(childComplexity), true

	case "Job.From":
		if e.complexity.Job.From == nil {
			break
		}

		return e.complexity.Job.From(childComplexity), true

	case "Job.Id":
		if e.complexity.Job.ID == nil {
			break
		}

		return e.complexity.Job.ID(childComplexity), true

	case "Job.IsDeleted":
		if e.complexity.Job.IsDeleted == nil {
			break
		}

		return e.complexity.Job.IsDeleted(childComplexity), true

	case "Job.Title":
		if e.complexity.Job.Title == nil {
			break
		}

		return e.complexity.Job.Title(childComplexity), true

	case "Job.To":
		if e.complexity.Job.To == nil {
			break
		}

		return e.complexity.Job.To(childComplexity), true

	case "Job.Updated":
		if e.complexity.Job.Updated == nil {
			break
		}

		return e.complexity.Job.Updated(childComplexity), true

	case "Job.Version":
		if e.complexity.Job.Version == nil {
			break
		}

		return e.complexity.Job.Version(childComplexity), true

	case "Link.Created":
		if e.complexity.Link.Created == nil {
			break
		}

		return e.complexity.Link.Created(childComplexity), true

	case "Link.Description":
		if e.complexity.Link.Description == nil {
			break
		}

		return e.complexity.Link.Description(childComplexity), true

	case "Link.Id":
		if e.complexity.Link.ID == nil {
			break
		}

		return e.complexity.Link.ID(childComplexity), true

	case "Link.IsDeleted":
		if e.complexity.Link.IsDeleted == nil {
			break
		}

		return e.complexity.Link.IsDeleted(childComplexity), true

	case "Link.Parameters":
		if e.complexity.Link.Parameters == nil {
			break
		}

		return e.complexity.Link.Parameters(childComplexity), true

	case "Link.Title":
		if e.complexity.Link.Title == nil {
			break
		}

		return e.complexity.Link.Title(childComplexity), true

	case "Link.Type":
		if e.complexity.Link.Type == nil {
			break
		}

		return e.complexity.Link.Type(childComplexity), true

	case "Link.Url":
		if e.complexity.Link.URL == nil {
			break
		}

		return e.complexity.Link.URL(childComplexity), true

	case "Link.Updated":
		if e.complexity.Link.Updated == nil {
			break
		}

		return e.complexity.Link.Updated(childComplexity), true

	case "Link.Version":
		if e.complexity.Link.Version == nil {
			break
		}

		return e.complexity.Link.Version(childComplexity), true

	case "MonthYear.Month":
		if e.complexity.MonthYear.Month == nil {
			break
		}

		return e.complexity.MonthYear.Month(childComplexity), true

	case "MonthYear.Year":
		if e.complexity.MonthYear.Year == nil {
			break
		}

		return e.complexity.MonthYear.Year(childComplexity), true

	case "Mutation.approveComment":
		if e.complexity.Mutation.ApproveComment == nil {
			break
		}

		args, err := ec.field_Mutation_approveComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveComment(childComplexity, args["Id"].(int), args["Approved"].(*bool)), true

	case "Mutation.approveReference":
		if e.complexity.Mutation.ApproveReference == nil {
			break
		}

		args, err := ec.field_Mutation_approveReference_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveReference(childComplexity, args["UUID"].(string), args["Approved"].(*bool)), true

	case "Mutation.createAdmin":
		if e.complexity.Mutation.CreateAdmin == nil {
			break
		}

		args, err := ec.field_Mutation_createAdmin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAdmin(childComplexity, args["Name"].(*model.NameInput), args["Credentials"].(*model.CredentialsInput), args["Address"].(*model.AddressInput), args["Phones"].([]*model.PhoneInput), args["Emails"].([]*model.EmailInput)), true

	case "Mutation.createComment":
		if e.complexity.Mutation.CreateComment == nil {
			break
		}

		args, err := ec.field_Mutation_createComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateComment(childComplexity, args["Type"].(*model.CommentType), args["Message"].(*string), args["AdminUUID"].(*string), args["ReferenceUUID"].(*string), args["VisitorUUID"].(*string)), true

	case "Mutation.createContact":
		if e.complexity.Mutation.CreateContact == nil {
			break
		}

		args, err := ec.field_Mutation_createContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateContact(childComplexity, args["Name"].(*model.NameInput), args["Address"].(*model.AddressInput), args["EmailType"].(*model.EmailType), args["Email"].(*string), args["PhoneType"].(*model.PhoneType), args["Phone"].(*string), args["Preferred"].(*model.PreferredContact), args["Subject"].(*string), args["Message"].(*string)), true

	case "Mutation.createEmail":
		if e.complexity.Mutation.CreateEmail == nil {
			break
		}

		args, err := ec.field_Mutation_createEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEmail(childComplexity, args["Address"].(string), args["Type"].(*model.EmailType), args["AdminUUID"].(*string), args["ReferenceUUID"].(*string)), true

	case "Mutation.createJob":
		if e.complexity.Mutation.CreateJob == nil {
			break
		}

		args, err := ec.field_Mutation_createJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateJob(childComplexity, args["Company"].(*string), args["Address"].(*model.AddressInput), args["Title"].(*string), args["Duties"].(*string), args["From"].(*model.MonthYearInput), args["To"].(*model.MonthYearInput)), true

	case "Mutation.createLink":
		if e.complexity.Mutation.CreateLink == nil {
			break
		}

		args, err := ec.field_Mutation_createLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLink(childComplexity, args["Url"].(*string), args["Title"].(*string), args["Description"].(*string), args["Type"].(*model.LinkType), args["Parameters"].([]*model.ParameterInput)), true

	case "Mutation.createPage":
		if e.complexity.Mutation.CreatePage == nil {
			break
		}

		args, err := ec.field_Mutation_createPage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePage(childComplexity, args["Name"].(string), args["Content"].(*string)), true

	case "Mutation.createParameter":
		if e.complexity.Mutation.CreateParameter == nil {
			break
		}

		args, err := ec.field_Mutation_createParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateParameter(childComplexity, args["Key"].(*string), args["Value"].(*string)), true

	case "Mutation.createPhone":
		if e.complexity.Mutation.CreatePhone == nil {
			break
		}

		args, err := ec.field_Mutation_createPhone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePhone(childComplexity, args["Number"].(string), args["Type"].(*model.PhoneType), args["Extension"].(*string), args["AdminUUID"].(*string), args["ReferenceUUID"].(*string)), true

	case "Mutation.createReference":
		if e.complexity.Mutation.CreateReference == nil {
			break
		}

		args, err := ec.field_Mutation_createReference_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateReference(childComplexity, args["Name"].(*model.NameInput), args["Address"].(*model.AddressInput), args["Title"].(*string), args["Company"].(*string), args["Phones"].([]*model.PhoneInput), args["Emails"].([]*model.EmailInput), args["Credentials"].(*model.CredentialsInput)), true

	case "Mutation.createSchool":
		if e.complexity.Mutation.CreateSchool == nil {
			break
		}

		args, err := ec.field_Mutation_createSchool_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSchool(childComplexity, args["Name"].(*string), args["Address"].(*model.AddressInput), args["Degree"].(*string), args["From"].(*model.MonthYearInput), args["To"].(*model.MonthYearInput)), true

	case "Mutation.createVisitor":
		if e.complexity.Mutation.CreateVisitor == nil {
			break
		}

		args, err := ec.field_Mutation_createVisitor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateVisitor(childComplexity, args["Name"].(*model.NameInput), args["Credentials"].(*model.CredentialsInput), args["Email"].(*string)), true

	case "Mutation.deleteAdmin":
		if e.complexity.Mutation.DeleteAdmin == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAdmin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAdmin(childComplexity, args["UUID"].(string)), true

	case "Mutation.deleteComment":
		if e.complexity.Mutation.DeleteComment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteComment(childComplexity, args["Id"].(int)), true

	case "Mutation.deleteContact":
		if e.complexity.Mutation.DeleteContact == nil {
			break
		}

		args, err := ec.field_Mutation_deleteContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteContact(childComplexity, args["Id"].(int)), true

	case "Mutation.deleteEmail":
		if e.complexity.Mutation.DeleteEmail == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEmail(childComplexity, args["Id"].(int)), true

	case "Mutation.deleteJob":
		if e.complexity.Mutation.DeleteJob == nil {
			break
		}

		args, err := ec.field_Mutation_deleteJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteJob(childComplexity, args["Id"].(int)), true

	case "Mutation.deleteLink":
		if e.complexity.Mutation.DeleteLink == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLink(childComplexity, args["Id"].(int)), true

	case "Mutation.deletePage":
		if e.complexity.Mutation.DeletePage == nil {
			break
		}

		args, err := ec.field_Mutation_deletePage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePage(childComplexity, args["Name"].(string)), true

	case "Mutation.deleteParameter":
		if e.complexity.Mutation.DeleteParameter == nil {
			break
		}

		args, err := ec.field_Mutation_deleteParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteParameter(childComplexity, args["Id"].(int)), true

	case "Mutation.deletePhone":
		if e.complexity.Mutation.DeletePhone == nil {
			break
		}

		args, err := ec.field_Mutation_deletePhone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePhone(childComplexity, args["Id"].(int)), true

	case "Mutation.deleteReference":
		if e.complexity.Mutation.DeleteReference == nil {
			break
		}

		args, err := ec.field_Mutation_deleteReference_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteReference(childComplexity, args["UUID"].(string)), true

	case "Mutation.deleteSchool":
		if e.complexity.Mutation.DeleteSchool == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSchool_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSchool(childComplexity, args["Id"].(int)), true

	case "Mutation.deleteVisitor":
		if e.complexity.Mutation.DeleteVisitor == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVisitor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVisitor(childComplexity, args["UUID"].(string)), true

	case "Mutation.loginAdmin":
		if e.complexity.Mutation.LoginAdmin == nil {
			break
		}

		args, err := ec.field_Mutation_loginAdmin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LoginAdmin(childComplexity, args["Username"].(*string), args["Password"].(*string)), true

	case "Mutation.loginReference":
		if e.complexity.Mutation.LoginReference == nil {
			break
		}

		args, err := ec.field_Mutation_loginReference_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LoginReference(childComplexity, args["Username"].(*string), args["Password"].(*string)), true

	case "Mutation.loginVisitor":
		if e.complexity.Mutation.LoginVisitor == nil {
			break
		}

		args, err := ec.field_Mutation_loginVisitor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LoginVisitor(childComplexity, args["Username"].(*string), args["Password"].(*string)), true

	case "Mutation.updateAdmin":
		if e.complexity.Mutation.UpdateAdmin == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdmin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdmin(childComplexity, args["UUID"].(string), args["Name"].(*model.NameInput), args["Credentials"].(*model.CredentialsInput), args["Address"].(*model.AddressInput), args["Phones"].([]*model.PhoneInput), args["Emails"].([]*model.EmailInput)), true

	case "Mutation.updateComment":
		if e.complexity.Mutation.UpdateComment == nil {
			break
		}

		args, err := ec.field_Mutation_updateComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateComment(childComplexity, args["Id"].(int), args["Type"].(*model.CommentType), args["Message"].(*string)), true

	case "Mutation.updateContact":
		if e.complexity.Mutation.UpdateContact == nil {
			break
		}

		args, err := ec.field_Mutation_updateContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateContact(childComplexity, args["Id"].(int), args["Name"].(*model.NameInput), args["Address"].(*model.AddressInput), args["EmailType"].(*model.EmailType), args["Email"].(*string), args["PhoneType"].(*model.PhoneType), args["Phone"].(*string), args["Preferred"].(*model.PreferredContact), args["Subject"].(*string), args["Message"].(*string)), true

	case "Mutation.updateEmail":
		if e.complexity.Mutation.UpdateEmail == nil {
			break
		}

		args, err := ec.field_Mutation_updateEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEmail(childComplexity, args["Id"].(int), args["Type"].(*model.EmailType), args["Address"].(*string)), true

	case "Mutation.updateJob":
		if e.complexity.Mutation.UpdateJob == nil {
			break
		}

		args, err := ec.field_Mutation_updateJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateJob(childComplexity, args["Id"].(int), args["Company"].(*string), args["Address"].(*model.AddressInput), args["Title"].(*string), args["Duties"].(*string), args["From"].(*model.MonthYearInput), args["To"].(*model.MonthYearInput)), true

	case "Mutation.updateLink":
		if e.complexity.Mutation.UpdateLink == nil {
			break
		}

		args, err := ec.field_Mutation_updateLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLink(childComplexity, args["Id"].(int), args["Url"].(*string), args["Title"].(*string), args["Description"].(*string), args["Type"].(*model.LinkType), args["Parameters"].([]*model.ParameterInput)), true

	case "Mutation.updatePage":
		if e.complexity.Mutation.UpdatePage == nil {
			break
		}

		args, err := ec.field_Mutation_updatePage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePage(childComplexity, args["Name"].(string), args["Content"].(*string)), true

	case "Mutation.updateParameter":
		if e.complexity.Mutation.UpdateParameter == nil {
			break
		}

		args, err := ec.field_Mutation_updateParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateParameter(childComplexity, args["Id"].(int), args["Key"].(*string), args["Value"].(*string)), true

	case "Mutation.updatePhone":
		if e.complexity.Mutation.UpdatePhone == nil {
			break
		}

		args, err := ec.field_Mutation_updatePhone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePhone(childComplexity, args["Id"].(int), args["Type"].(*model.PhoneType), args["Number"].(*string), args["Extension"].(*string)), true

	case "Mutation.updateReference":
		if e.complexity.Mutation.UpdateReference == nil {
			break
		}

		args, err := ec.field_Mutation_updateReference_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateReference(childComplexity, args["UUID"].(string), args["Name"].(*model.NameInput), args["Address"].(*model.AddressInput), args["Title"].(*string), args["Company"].(*string), args["Phones"].([]*model.PhoneInput), args["Emails"].([]*model.EmailInput), args["Credentials"].(*model.CredentialsInput)), true

	case "Mutation.updateSchool":
		if e.complexity.Mutation.UpdateSchool == nil {
			break
		}

		args, err := ec.field_Mutation_updateSchool_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSchool(childComplexity, args["Id"].(int), args["Name"].(*string), args["Address"].(*model.AddressInput), args["Degree"].(*string), args["From"].(*model.MonthYearInput), args["To"].(*model.MonthYearInput)), true

	case "Mutation.updateVisitor":
		if e.complexity.Mutation.UpdateVisitor == nil {
			break
		}

		args, err := ec.field_Mutation_updateVisitor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVisitor(childComplexity, args["UUID"].(string), args["Name"].(*model.NameInput), args["Address"].(*model.AddressInput), args["Credentials"].(*model.CredentialsInput), args["Email"].(*string)), true

	case "Name.First":
		if e.complexity.Name.First == nil {
			break
		}

		return e.complexity.Name.First(childComplexity), true

	case "Name.Last":
		if e.complexity.Name.Last == nil {
			break
		}

		return e.complexity.Name.Last(childComplexity), true

	case "Name.Middle":
		if e.complexity.Name.Middle == nil {
			break
		}

		return e.complexity.Name.Middle(childComplexity), true

	case "Name.Salutation":
		if e.complexity.Name.Salutation == nil {
			break
		}

		return e.complexity.Name.Salutation(childComplexity), true

	case "Name.Suffix":
		if e.complexity.Name.Suffix == nil {
			break
		}

		return e.complexity.Name.Suffix(childComplexity), true

	case "Page.Content":
		if e.complexity.Page.Content == nil {
			break
		}

		return e.complexity.Page.Content(childComplexity), true

	case "Page.Created":
		if e.complexity.Page.Created == nil {
			break
		}

		return e.complexity.Page.Created(childComplexity), true

	case "Page.Id":
		if e.complexity.Page.ID == nil {
			break
		}

		return e.complexity.Page.ID(childComplexity), true

	case "Page.IsDeleted":
		if e.complexity.Page.IsDeleted == nil {
			break
		}

		return e.complexity.Page.IsDeleted(childComplexity), true

	case "Page.Name":
		if e.complexity.Page.Name == nil {
			break
		}

		return e.complexity.Page.Name(childComplexity), true

	case "Page.Updated":
		if e.complexity.Page.Updated == nil {
			break
		}

		return e.complexity.Page.Updated(childComplexity), true

	case "Page.Version":
		if e.complexity.Page.Version == nil {
			break
		}

		return e.complexity.Page.Version(childComplexity), true

	case "Parameter.Created":
		if e.complexity.Parameter.Created == nil {
			break
		}

		return e.complexity.Parameter.Created(childComplexity), true

	case "Parameter.Id":
		if e.complexity.Parameter.ID == nil {
			break
		}

		return e.complexity.Parameter.ID(childComplexity), true

	case "Parameter.IsDeleted":
		if e.complexity.Parameter.IsDeleted == nil {
			break
		}

		return e.complexity.Parameter.IsDeleted(childComplexity), true

	case "Parameter.Key":
		if e.complexity.Parameter.Key == nil {
			break
		}

		return e.complexity.Parameter.Key(childComplexity), true

	case "Parameter.Updated":
		if e.complexity.Parameter.Updated == nil {
			break
		}

		return e.complexity.Parameter.Updated(childComplexity), true

	case "Parameter.Value":
		if e.complexity.Parameter.Value == nil {
			break
		}

		return e.complexity.Parameter.Value(childComplexity), true

	case "Parameter.Version":
		if e.complexity.Parameter.Version == nil {
			break
		}

		return e.complexity.Parameter.Version(childComplexity), true

	case "Phone.Created":
		if e.complexity.Phone.Created == nil {
			break
		}

		return e.complexity.Phone.Created(childComplexity), true

	case "Phone.Extension":
		if e.complexity.Phone.Extension == nil {
			break
		}

		return e.complexity.Phone.Extension(childComplexity), true

	case "Phone.Id":
		if e.complexity.Phone.ID == nil {
			break
		}

		return e.complexity.Phone.ID(childComplexity), true

	case "Phone.IsDeleted":
		if e.complexity.Phone.IsDeleted == nil {
			break
		}

		return e.complexity.Phone.IsDeleted(childComplexity), true

	case "Phone.Number":
		if e.complexity.Phone.Number == nil {
			break
		}

		return e.complexity.Phone.Number(childComplexity), true

	case "Phone.Type":
		if e.complexity.Phone.Type == nil {
			break
		}

		return e.complexity.Phone.Type(childComplexity), true

	case "Phone.Updated":
		if e.complexity.Phone.Updated == nil {
			break
		}

		return e.complexity.Phone.Updated(childComplexity), true

	case "Phone.Version":
		if e.complexity.Phone.Version == nil {
			break
		}

		return e.complexity.Phone.Version(childComplexity), true

	case "Query.getComments":
		if e.complexity.Query.GetComments == nil {
			break
		}

		args, err := ec.field_Query_getComments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetComments(childComplexity, args["IsDeleted"].(*bool), args["Limit"].(*int), args["Offset"].(*int), args["Approved"].(*bool)), true

	case "Query.getContacts":
		if e.complexity.Query.GetContacts == nil {
			break
		}

		args, err := ec.field_Query_getContacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetContacts(childComplexity, args["Limit"].(*int), args["Offset"].(*int), args["IsDeleted"].(*bool)), true

	case "Query.getEmails":
		if e.complexity.Query.GetEmails == nil {
			break
		}

		args, err := ec.field_Query_getEmails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetEmails(childComplexity, args["Limit"].(*int), args["Offset"].(*int), args["IsDeleted"].(*bool)), true

	case "Query.getJobs":
		if e.complexity.Query.GetJobs == nil {
			break
		}

		args, err := ec.field_Query_getJobs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetJobs(childComplexity, args["Limit"].(*int), args["Offset"].(*int), args["IsDeleted"].(*bool)), true

	case "Query.getLinks":
		if e.complexity.Query.GetLinks == nil {
			break
		}

		args, err := ec.field_Query_getLinks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetLinks(childComplexity, args["Limit"].(*int), args["Offset"].(*int), args["IsDeleted"].(*bool)), true

	case "Query.getPages":
		if e.complexity.Query.GetPages == nil {
			break
		}

		args, err := ec.field_Query_getPages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPages(childComplexity, args["Limit"].(*int), args["Offset"].(*int), args["IsDeleted"].(*bool)), true

	case "Query.getParameters":
		if e.complexity.Query.GetParameters == nil {
			break
		}

		args, err := ec.field_Query_getParameters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetParameters(childComplexity, args["Limit"].(*int), args["Offset"].(*int), args["IsDeleted"].(*bool)), true

	case "Query.getPhones":
		if e.complexity.Query.GetPhones == nil {
			break
		}

		args, err := ec.field_Query_getPhones_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPhones(childComplexity, args["Limit"].(*int), args["Offset"].(*int), args["IsDeleted"].(*bool)), true

	case "Query.getReferences":
		if e.complexity.Query.GetReferences == nil {
			break
		}

		args, err := ec.field_Query_getReferences_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetReferences(childComplexity, args["IsDeleted"].(*bool), args["Limit"].(*int), args["Offset"].(*int), args["Approved"].(*bool)), true

	case "Query.getSchools":
		if e.complexity.Query.GetSchools == nil {
			break
		}

		args, err := ec.field_Query_getSchools_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSchools(childComplexity, args["Limit"].(*int), args["Offset"].(*int), args["IsDeleted"].(*bool)), true

	case "Query.getVisitors":
		if e.complexity.Query.GetVisitors == nil {
			break
		}

		args, err := ec.field_Query_getVisitors_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetVisitors(childComplexity, args["Limit"].(*int), args["Offset"].(*int), args["IsDeleted"].(*bool)), true

	case "Query.showAdmin":
		if e.complexity.Query.ShowAdmin == nil {
			break
		}

		args, err := ec.field_Query_showAdmin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShowAdmin(childComplexity, args["UUID"].(string)), true

	case "Query.showComment":
		if e.complexity.Query.ShowComment == nil {
			break
		}

		args, err := ec.field_Query_showComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShowComment(childComplexity, args["Id"].(int)), true

	case "Query.showContact":
		if e.complexity.Query.ShowContact == nil {
			break
		}

		args, err := ec.field_Query_showContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShowContact(childComplexity, args["Id"].(int)), true

	case "Query.showEmail":
		if e.complexity.Query.ShowEmail == nil {
			break
		}

		args, err := ec.field_Query_showEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShowEmail(childComplexity, args["Id"].(int)), true

	case "Query.showJob":
		if e.complexity.Query.ShowJob == nil {
			break
		}

		args, err := ec.field_Query_showJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShowJob(childComplexity, args["Id"].(int)), true

	case "Query.showLink":
		if e.complexity.Query.ShowLink == nil {
			break
		}

		args, err := ec.field_Query_showLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShowLink(childComplexity, args["Id"].(int)), true

	case "Query.showPage":
		if e.complexity.Query.ShowPage == nil {
			break
		}

		args, err := ec.field_Query_showPage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShowPage(childComplexity, args["Name"].(string)), true

	case "Query.showParameter":
		if e.complexity.Query.ShowParameter == nil {
			break
		}

		args, err := ec.field_Query_showParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShowParameter(childComplexity, args["Id"].(int)), true

	case "Query.showPhone":
		if e.complexity.Query.ShowPhone == nil {
			break
		}

		args, err := ec.field_Query_showPhone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShowPhone(childComplexity, args["Id"].(int)), true

	case "Query.showReference":
		if e.complexity.Query.ShowReference == nil {
			break
		}

		args, err := ec.field_Query_showReference_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShowReference(childComplexity, args["UUID"].(string)), true

	case "Query.showSchool":
		if e.complexity.Query.ShowSchool == nil {
			break
		}

		args, err := ec.field_Query_showSchool_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShowSchool(childComplexity, args["Id"].(int)), true

	case "Query.showVisitor":
		if e.complexity.Query.ShowVisitor == nil {
			break
		}

		args, err := ec.field_Query_showVisitor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShowVisitor(childComplexity, args["UUID"].(string)), true

	case "Reference.Address":
		if e.complexity.Reference.Address == nil {
			break
		}

		return e.complexity.Reference.Address(childComplexity), true

	case "Reference.Approved":
		if e.complexity.Reference.Approved == nil {
			break
		}

		return e.complexity.Reference.Approved(childComplexity), true

	case "Reference.Comments":
		if e.complexity.Reference.Comments == nil {
			break
		}

		return e.complexity.Reference.Comments(childComplexity), true

	case "Reference.Company":
		if e.complexity.Reference.Company == nil {
			break
		}

		return e.complexity.Reference.Company(childComplexity), true

	case "Reference.Created":
		if e.complexity.Reference.Created == nil {
			break
		}

		return e.complexity.Reference.Created(childComplexity), true

	case "Reference.Credentials":
		if e.complexity.Reference.Credentials == nil {
			break
		}

		return e.complexity.Reference.Credentials(childComplexity), true

	case "Reference.Emails":
		if e.complexity.Reference.Emails == nil {
			break
		}

		return e.complexity.Reference.Emails(childComplexity), true

	case "Reference.Id":
		if e.complexity.Reference.ID == nil {
			break
		}

		return e.complexity.Reference.ID(childComplexity), true

	case "Reference.IsDeleted":
		if e.complexity.Reference.IsDeleted == nil {
			break
		}

		return e.complexity.Reference.IsDeleted(childComplexity), true

	case "Reference.Name":
		if e.complexity.Reference.Name == nil {
			break
		}

		return e.complexity.Reference.Name(childComplexity), true

	case "Reference.Phones":
		if e.complexity.Reference.Phones == nil {
			break
		}

		return e.complexity.Reference.Phones(childComplexity), true

	case "Reference.Title":
		if e.complexity.Reference.Title == nil {
			break
		}

		return e.complexity.Reference.Title(childComplexity), true

	case "Reference.UUID":
		if e.complexity.Reference.UUID == nil {
			break
		}

		return e.complexity.Reference.UUID(childComplexity), true

	case "Reference.Updated":
		if e.complexity.Reference.Updated == nil {
			break
		}

		return e.complexity.Reference.Updated(childComplexity), true

	case "Reference.Version":
		if e.complexity.Reference.Version == nil {
			break
		}

		return e.complexity.Reference.Version(childComplexity), true

	case "School.Address":
		if e.complexity.School.Address == nil {
			break
		}

		return e.complexity.School.Address(childComplexity), true

	case "School.Created":
		if e.complexity.School.Created == nil {
			break
		}

		return e.complexity.School.Created(childComplexity), true

	case "School.Degree":
		if e.complexity.School.Degree == nil {
			break
		}

		return e.complexity.School.Degree(childComplexity), true

	case "School.From":
		if e.complexity.School.From == nil {
			break
		}

		return e.complexity.School.From(childComplexity), true

	case "School.Id":
		if e.complexity.School.ID == nil {
			break
		}

		return e.complexity.School.ID(childComplexity), true

	case "School.IsDeleted":
		if e.complexity.School.IsDeleted == nil {
			break
		}

		return e.complexity.School.IsDeleted(childComplexity), true

	case "School.Name":
		if e.complexity.School.Name == nil {
			break
		}

		return e.complexity.School.Name(childComplexity), true

	case "School.Program":
		if e.complexity.School.Program == nil {
			break
		}

		return e.complexity.School.Program(childComplexity), true

	case "School.To":
		if e.complexity.School.To == nil {
			break
		}

		return e.complexity.School.To(childComplexity), true

	case "School.Updated":
		if e.complexity.School.Updated == nil {
			break
		}

		return e.complexity.School.Updated(childComplexity), true

	case "School.Version":
		if e.complexity.School.Version == nil {
			break
		}

		return e.complexity.School.Version(childComplexity), true

	case "Visitor.Approved":
		if e.complexity.Visitor.Approved == nil {
			break
		}

		return e.complexity.Visitor.Approved(childComplexity), true

	case "Visitor.Created":
		if e.complexity.Visitor.Created == nil {
			break
		}

		return e.complexity.Visitor.Created(childComplexity), true

	case "Visitor.Credentials":
		if e.complexity.Visitor.Credentials == nil {
			break
		}

		return e.complexity.Visitor.Credentials(childComplexity), true

	case "Visitor.Email":
		if e.complexity.Visitor.Email == nil {
			break
		}

		return e.complexity.Visitor.Email(childComplexity), true

	case "Visitor.Id":
		if e.complexity.Visitor.ID == nil {
			break
		}

		return e.complexity.Visitor.ID(childComplexity), true

	case "Visitor.IsDeleted":
		if e.complexity.Visitor.IsDeleted == nil {
			break
		}

		return e.complexity.Visitor.IsDeleted(childComplexity), true

	case "Visitor.Name":
		if e.complexity.Visitor.Name == nil {
			break
		}

		return e.complexity.Visitor.Name(childComplexity), true

	case "Visitor.UUID":
		if e.complexity.Visitor.UUID == nil {
			break
		}

		return e.complexity.Visitor.UUID(childComplexity), true

	case "Visitor.Updated":
		if e.complexity.Visitor.Updated == nil {
			break
		}

		return e.complexity.Visitor.Updated(childComplexity), true

	case "Visitor.Version":
		if e.complexity.Visitor.Version == nil {
			break
		}

		return e.complexity.Visitor.Version(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAddressInput,
		ec.unmarshalInputCredentialsInput,
		ec.unmarshalInputEmailInput,
		ec.unmarshalInputMonthYearInput,
		ec.unmarshalInputNameInput,
		ec.unmarshalInputParameterInput,
		ec.unmarshalInputPhoneInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

//go:embed "schema.graphqls"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schema.graphqls", Input: sourceData("schema.graphqls"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_approveComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["Approved"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Approved"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Approved"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_approveReference_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["UUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UUID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["UUID"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["Approved"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Approved"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Approved"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createAdmin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NameInput
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg0, err = ec.unmarshalONameInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐNameInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg0
	var arg1 *model.CredentialsInput
	if tmp, ok := rawArgs["Credentials"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Credentials"))
		arg1, err = ec.unmarshalOCredentialsInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCredentialsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Credentials"] = arg1
	var arg2 *model.AddressInput
	if tmp, ok := rawArgs["Address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
		arg2, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Address"] = arg2
	var arg3 []*model.PhoneInput
	if tmp, ok := rawArgs["Phones"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Phones"))
		arg3, err = ec.unmarshalOPhoneInput2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Phones"] = arg3
	var arg4 []*model.EmailInput
	if tmp, ok := rawArgs["Emails"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Emails"))
		arg4, err = ec.unmarshalOEmailInput2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Emails"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_createComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentType
	if tmp, ok := rawArgs["Type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
		arg0, err = ec.unmarshalOCommentType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCommentType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Type"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["Message"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Message"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Message"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["AdminUUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AdminUUID"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["AdminUUID"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["ReferenceUUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReferenceUUID"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ReferenceUUID"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["VisitorUUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("VisitorUUID"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["VisitorUUID"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_createContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NameInput
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg0, err = ec.unmarshalONameInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐNameInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg0
	var arg1 *model.AddressInput
	if tmp, ok := rawArgs["Address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
		arg1, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Address"] = arg1
	var arg2 *model.EmailType
	if tmp, ok := rawArgs["EmailType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("EmailType"))
		arg2, err = ec.unmarshalOEmailType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["EmailType"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["Email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Email"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Email"] = arg3
	var arg4 *model.PhoneType
	if tmp, ok := rawArgs["PhoneType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PhoneType"))
		arg4, err = ec.unmarshalOPhoneType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["PhoneType"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["Phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Phone"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Phone"] = arg5
	var arg6 *model.PreferredContact
	if tmp, ok := rawArgs["Preferred"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Preferred"))
		arg6, err = ec.unmarshalOPreferredContact2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPreferredContact(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Preferred"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["Subject"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subject"))
		arg7, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Subject"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["Message"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Message"))
		arg8, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Message"] = arg8
	return args, nil
}

func (ec *executionContext) field_Mutation_createEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Address"] = arg0
	var arg1 *model.EmailType
	if tmp, ok := rawArgs["Type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
		arg1, err = ec.unmarshalOEmailType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Type"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["AdminUUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AdminUUID"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["AdminUUID"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["ReferenceUUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReferenceUUID"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ReferenceUUID"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_createJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["Company"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Company"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Company"] = arg0
	var arg1 *model.AddressInput
	if tmp, ok := rawArgs["Address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
		arg1, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Address"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Title"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Title"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Title"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["Duties"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Duties"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Duties"] = arg3
	var arg4 *model.MonthYearInput
	if tmp, ok := rawArgs["From"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("From"))
		arg4, err = ec.unmarshalOMonthYearInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYearInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["From"] = arg4
	var arg5 *model.MonthYearInput
	if tmp, ok := rawArgs["To"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("To"))
		arg5, err = ec.unmarshalOMonthYearInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYearInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["To"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_createLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["Url"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Url"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Url"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["Title"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Title"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Title"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Description"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Description"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Description"] = arg2
	var arg3 *model.LinkType
	if tmp, ok := rawArgs["Type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
		arg3, err = ec.unmarshalOLinkType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLinkType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Type"] = arg3
	var arg4 []*model.ParameterInput
	if tmp, ok := rawArgs["Parameters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Parameters"))
		arg4, err = ec.unmarshalOParameterInput2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameterInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Parameters"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_createPage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["Content"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Content"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Content"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createParameter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["Key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Key"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Key"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["Value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Value"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createPhone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Number"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Number"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Number"] = arg0
	var arg1 *model.PhoneType
	if tmp, ok := rawArgs["Type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
		arg1, err = ec.unmarshalOPhoneType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Type"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Extension"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Extension"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Extension"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["AdminUUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AdminUUID"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["AdminUUID"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["ReferenceUUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReferenceUUID"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ReferenceUUID"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_createReference_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NameInput
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg0, err = ec.unmarshalONameInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐNameInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg0
	var arg1 *model.AddressInput
	if tmp, ok := rawArgs["Address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
		arg1, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Address"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Title"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Title"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Title"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["Company"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Company"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Company"] = arg3
	var arg4 []*model.PhoneInput
	if tmp, ok := rawArgs["Phones"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Phones"))
		arg4, err = ec.unmarshalOPhoneInput2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Phones"] = arg4
	var arg5 []*model.EmailInput
	if tmp, ok := rawArgs["Emails"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Emails"))
		arg5, err = ec.unmarshalOEmailInput2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Emails"] = arg5
	var arg6 *model.CredentialsInput
	if tmp, ok := rawArgs["Credentials"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Credentials"))
		arg6, err = ec.unmarshalOCredentialsInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCredentialsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Credentials"] = arg6
	return args, nil
}

func (ec *executionContext) field_Mutation_createSchool_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg0
	var arg1 *model.AddressInput
	if tmp, ok := rawArgs["Address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
		arg1, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Address"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Degree"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Degree"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Degree"] = arg2
	var arg3 *model.MonthYearInput
	if tmp, ok := rawArgs["From"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("From"))
		arg3, err = ec.unmarshalOMonthYearInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYearInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["From"] = arg3
	var arg4 *model.MonthYearInput
	if tmp, ok := rawArgs["To"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("To"))
		arg4, err = ec.unmarshalOMonthYearInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYearInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["To"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_createVisitor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NameInput
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg0, err = ec.unmarshalONameInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐNameInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg0
	var arg1 *model.CredentialsInput
	if tmp, ok := rawArgs["Credentials"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Credentials"))
		arg1, err = ec.unmarshalOCredentialsInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCredentialsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Credentials"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Email"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Email"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAdmin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["UUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UUID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["UUID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteParameter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePhone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteReference_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["UUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UUID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["UUID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSchool_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVisitor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["UUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UUID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["UUID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_loginAdmin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["Username"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Username"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Username"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["Password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Password"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Password"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_loginReference_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["Username"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Username"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Username"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["Password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Password"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Password"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_loginVisitor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["Username"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Username"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Username"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["Password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Password"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Password"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdmin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["UUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UUID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["UUID"] = arg0
	var arg1 *model.NameInput
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg1, err = ec.unmarshalONameInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐNameInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg1
	var arg2 *model.CredentialsInput
	if tmp, ok := rawArgs["Credentials"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Credentials"))
		arg2, err = ec.unmarshalOCredentialsInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCredentialsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Credentials"] = arg2
	var arg3 *model.AddressInput
	if tmp, ok := rawArgs["Address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
		arg3, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Address"] = arg3
	var arg4 []*model.PhoneInput
	if tmp, ok := rawArgs["Phones"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Phones"))
		arg4, err = ec.unmarshalOPhoneInput2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Phones"] = arg4
	var arg5 []*model.EmailInput
	if tmp, ok := rawArgs["Emails"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Emails"))
		arg5, err = ec.unmarshalOEmailInput2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Emails"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_updateComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	var arg1 *model.CommentType
	if tmp, ok := rawArgs["Type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
		arg1, err = ec.unmarshalOCommentType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCommentType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Type"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Message"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Message"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Message"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	var arg1 *model.NameInput
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg1, err = ec.unmarshalONameInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐNameInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg1
	var arg2 *model.AddressInput
	if tmp, ok := rawArgs["Address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
		arg2, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Address"] = arg2
	var arg3 *model.EmailType
	if tmp, ok := rawArgs["EmailType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("EmailType"))
		arg3, err = ec.unmarshalOEmailType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["EmailType"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["Email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Email"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Email"] = arg4
	var arg5 *model.PhoneType
	if tmp, ok := rawArgs["PhoneType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PhoneType"))
		arg5, err = ec.unmarshalOPhoneType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["PhoneType"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["Phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Phone"))
		arg6, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Phone"] = arg6
	var arg7 *model.PreferredContact
	if tmp, ok := rawArgs["Preferred"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Preferred"))
		arg7, err = ec.unmarshalOPreferredContact2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPreferredContact(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Preferred"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["Subject"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subject"))
		arg8, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Subject"] = arg8
	var arg9 *string
	if tmp, ok := rawArgs["Message"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Message"))
		arg9, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Message"] = arg9
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	var arg1 *model.EmailType
	if tmp, ok := rawArgs["Type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
		arg1, err = ec.unmarshalOEmailType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Type"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Address"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["Company"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Company"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Company"] = arg1
	var arg2 *model.AddressInput
	if tmp, ok := rawArgs["Address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
		arg2, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Address"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["Title"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Title"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Title"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["Duties"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Duties"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Duties"] = arg4
	var arg5 *model.MonthYearInput
	if tmp, ok := rawArgs["From"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("From"))
		arg5, err = ec.unmarshalOMonthYearInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYearInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["From"] = arg5
	var arg6 *model.MonthYearInput
	if tmp, ok := rawArgs["To"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("To"))
		arg6, err = ec.unmarshalOMonthYearInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYearInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["To"] = arg6
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["Url"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Url"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Url"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Title"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Title"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Title"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["Description"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Description"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Description"] = arg3
	var arg4 *model.LinkType
	if tmp, ok := rawArgs["Type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
		arg4, err = ec.unmarshalOLinkType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLinkType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Type"] = arg4
	var arg5 []*model.ParameterInput
	if tmp, ok := rawArgs["Parameters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Parameters"))
		arg5, err = ec.unmarshalOParameterInput2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameterInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Parameters"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["Content"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Content"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Content"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateParameter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["Key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Key"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Key"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Value"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Value"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePhone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	var arg1 *model.PhoneType
	if tmp, ok := rawArgs["Type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
		arg1, err = ec.unmarshalOPhoneType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Type"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Number"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Number"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Number"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["Extension"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Extension"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Extension"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_updateReference_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["UUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UUID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["UUID"] = arg0
	var arg1 *model.NameInput
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg1, err = ec.unmarshalONameInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐNameInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg1
	var arg2 *model.AddressInput
	if tmp, ok := rawArgs["Address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
		arg2, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Address"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["Title"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Title"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Title"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["Company"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Company"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Company"] = arg4
	var arg5 []*model.PhoneInput
	if tmp, ok := rawArgs["Phones"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Phones"))
		arg5, err = ec.unmarshalOPhoneInput2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Phones"] = arg5
	var arg6 []*model.EmailInput
	if tmp, ok := rawArgs["Emails"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Emails"))
		arg6, err = ec.unmarshalOEmailInput2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Emails"] = arg6
	var arg7 *model.CredentialsInput
	if tmp, ok := rawArgs["Credentials"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Credentials"))
		arg7, err = ec.unmarshalOCredentialsInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCredentialsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Credentials"] = arg7
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSchool_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg1
	var arg2 *model.AddressInput
	if tmp, ok := rawArgs["Address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
		arg2, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Address"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["Degree"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Degree"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Degree"] = arg3
	var arg4 *model.MonthYearInput
	if tmp, ok := rawArgs["From"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("From"))
		arg4, err = ec.unmarshalOMonthYearInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYearInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["From"] = arg4
	var arg5 *model.MonthYearInput
	if tmp, ok := rawArgs["To"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("To"))
		arg5, err = ec.unmarshalOMonthYearInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYearInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["To"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVisitor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["UUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UUID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["UUID"] = arg0
	var arg1 *model.NameInput
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg1, err = ec.unmarshalONameInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐNameInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg1
	var arg2 *model.AddressInput
	if tmp, ok := rawArgs["Address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
		arg2, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Address"] = arg2
	var arg3 *model.CredentialsInput
	if tmp, ok := rawArgs["Credentials"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Credentials"))
		arg3, err = ec.unmarshalOCredentialsInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCredentialsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Credentials"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["Email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Email"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Email"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getComments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["IsDeleted"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsDeleted"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsDeleted"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["Limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["Offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Offset"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["Approved"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Approved"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Approved"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getContacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["Limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["Offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Offset"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["IsDeleted"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsDeleted"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsDeleted"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getEmails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["Limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["Offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Offset"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["IsDeleted"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsDeleted"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsDeleted"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getJobs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["Limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["Offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Offset"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["IsDeleted"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsDeleted"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsDeleted"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getLinks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["Limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["Offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Offset"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["IsDeleted"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsDeleted"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsDeleted"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["Limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["Offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Offset"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["IsDeleted"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsDeleted"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsDeleted"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getParameters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["Limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["Offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Offset"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["IsDeleted"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsDeleted"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsDeleted"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPhones_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["Limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["Offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Offset"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["IsDeleted"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsDeleted"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsDeleted"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getReferences_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["IsDeleted"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsDeleted"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsDeleted"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["Limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["Offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Offset"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["Approved"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Approved"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Approved"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getSchools_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["Limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["Offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Offset"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["IsDeleted"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsDeleted"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsDeleted"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getVisitors_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["Limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["Offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Offset"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["IsDeleted"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsDeleted"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsDeleted"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_showAdmin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["UUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UUID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["UUID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_showComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_showContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_showEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_showJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_showLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_showPage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_showParameter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_showPhone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_showReference_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["UUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UUID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["UUID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_showSchool_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_showVisitor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["UUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UUID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["UUID"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Address_Address(ctx context.Context, field graphql.CollectedField, obj *model.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Address_Address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Address_Address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Address_Suite(ctx context.Context, field graphql.CollectedField, obj *model.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Address_Suite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Address_Suite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Address_City(ctx context.Context, field graphql.CollectedField, obj *model.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Address_City(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Address_City(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Address_State(ctx context.Context, field graphql.CollectedField, obj *model.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Address_State(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Address_State(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Address_Zip(ctx context.Context, field graphql.CollectedField, obj *model.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Address_Zip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Address_Zip(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Admin_Id(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Admin_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Admin_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Admin_Created(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Admin_Created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Admin_Created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Admin_Updated(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Admin_Updated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Admin_Updated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Admin_Version(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Admin_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Admin_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Admin_IsDeleted(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Admin_IsDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Admin_IsDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Admin_Name(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Admin_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Name)
	fc.Result = res
	return ec.marshalOName2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐName(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Admin_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Salutation":
				return ec.fieldContext_Name_Salutation(ctx, field)
			case "First":
				return ec.fieldContext_Name_First(ctx, field)
			case "Middle":
				return ec.fieldContext_Name_Middle(ctx, field)
			case "Last":
				return ec.fieldContext_Name_Last(ctx, field)
			case "Suffix":
				return ec.fieldContext_Name_Suffix(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Name", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Admin_Credentials(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Admin_Credentials(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Credentials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Credentials)
	fc.Result = res
	return ec.marshalOCredentials2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCredentials(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Admin_Credentials(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Username":
				return ec.fieldContext_Credentials_Username(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Credentials", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Admin_UUID(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Admin_UUID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Admin_UUID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Admin_Address(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Admin_Address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Admin_Address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Address":
				return ec.fieldContext_Address_Address(ctx, field)
			case "Suite":
				return ec.fieldContext_Address_Suite(ctx, field)
			case "City":
				return ec.fieldContext_Address_City(ctx, field)
			case "State":
				return ec.fieldContext_Address_State(ctx, field)
			case "Zip":
				return ec.fieldContext_Address_Zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Address", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Admin_Phones(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Admin_Phones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phones, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Phone)
	fc.Result = res
	return ec.marshalOPhone2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Admin_Phones(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Phone_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Phone_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Phone_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Phone_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Phone_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Phone_Type(ctx, field)
			case "Number":
				return ec.fieldContext_Phone_Number(ctx, field)
			case "Extension":
				return ec.fieldContext_Phone_Extension(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Phone", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Admin_Emails(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Admin_Emails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Emails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Email)
	fc.Result = res
	return ec.marshalOEmail2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Admin_Emails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Email_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Email_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Email_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Email_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Email_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Email_Type(ctx, field)
			case "Address":
				return ec.fieldContext_Email_Address(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Admin_Comments(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Admin_Comments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Admin_Comments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Comment_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Comment_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Comment_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Comment_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Comment_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Comment_Type(ctx, field)
			case "Message":
				return ec.fieldContext_Comment_Message(ctx, field)
			case "Approved":
				return ec.fieldContext_Comment_Approved(ctx, field)
			case "Admins":
				return ec.fieldContext_Comment_Admins(ctx, field)
			case "References":
				return ec.fieldContext_Comment_References(ctx, field)
			case "Visitors":
				return ec.fieldContext_Comment_Visitors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Auth_Token(ctx context.Context, field graphql.CollectedField, obj *model.Auth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Auth_Token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Auth_Token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Auth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Auth_UUID(ctx context.Context, field graphql.CollectedField, obj *model.Auth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Auth_UUID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Auth_UUID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Auth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Auth_Class(ctx context.Context, field graphql.CollectedField, obj *model.Auth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Auth_Class(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Class, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Auth_Class(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Auth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_Id(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_Created(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_Created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_Created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_Updated(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_Updated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_Updated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_Version(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_IsDeleted(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_IsDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_IsDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_Type(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommentType)
	fc.Result = res
	return ec.marshalOCommentType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCommentType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CommentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_Message(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_Message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_Message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_Approved(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_Approved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_Approved(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_Admins(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_Admins(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Admins, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Admin)
	fc.Result = res
	return ec.marshalOAdmin2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAdmin(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_Admins(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Admin_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Admin_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Admin_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Admin_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Admin_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Admin_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Admin_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Admin_UUID(ctx, field)
			case "Address":
				return ec.fieldContext_Admin_Address(ctx, field)
			case "Phones":
				return ec.fieldContext_Admin_Phones(ctx, field)
			case "Emails":
				return ec.fieldContext_Admin_Emails(ctx, field)
			case "Comments":
				return ec.fieldContext_Admin_Comments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Admin", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_References(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_References(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.References, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Reference)
	fc.Result = res
	return ec.marshalOReference2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_References(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Reference_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Reference_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Reference_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Reference_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Reference_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Reference_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Reference_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Reference_UUID(ctx, field)
			case "Address":
				return ec.fieldContext_Reference_Address(ctx, field)
			case "Title":
				return ec.fieldContext_Reference_Title(ctx, field)
			case "Company":
				return ec.fieldContext_Reference_Company(ctx, field)
			case "Phones":
				return ec.fieldContext_Reference_Phones(ctx, field)
			case "Emails":
				return ec.fieldContext_Reference_Emails(ctx, field)
			case "Comments":
				return ec.fieldContext_Reference_Comments(ctx, field)
			case "Approved":
				return ec.fieldContext_Reference_Approved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_Visitors(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_Visitors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visitors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Visitor)
	fc.Result = res
	return ec.marshalOVisitor2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐVisitor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_Visitors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Visitor_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Visitor_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Visitor_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Visitor_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Visitor_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Visitor_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Visitor_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Visitor_UUID(ctx, field)
			case "Email":
				return ec.fieldContext_Visitor_Email(ctx, field)
			case "Approved":
				return ec.fieldContext_Visitor_Approved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Visitor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_Id(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_Created(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_Created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_Created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_Updated(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_Updated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_Updated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_Version(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_IsDeleted(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_IsDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_IsDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_Name(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Name)
	fc.Result = res
	return ec.marshalOName2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐName(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Salutation":
				return ec.fieldContext_Name_Salutation(ctx, field)
			case "First":
				return ec.fieldContext_Name_First(ctx, field)
			case "Middle":
				return ec.fieldContext_Name_Middle(ctx, field)
			case "Last":
				return ec.fieldContext_Name_Last(ctx, field)
			case "Suffix":
				return ec.fieldContext_Name_Suffix(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Name", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_Address(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_Address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_Address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Address":
				return ec.fieldContext_Address_Address(ctx, field)
			case "Suite":
				return ec.fieldContext_Address_Suite(ctx, field)
			case "City":
				return ec.fieldContext_Address_City(ctx, field)
			case "State":
				return ec.fieldContext_Address_State(ctx, field)
			case "Zip":
				return ec.fieldContext_Address_Zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Address", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_EmailType(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_EmailType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EmailType)
	fc.Result = res
	return ec.marshalOEmailType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_EmailType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EmailType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_Email(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_Email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_Email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_PhoneType(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_PhoneType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PhoneType)
	fc.Result = res
	return ec.marshalOPhoneType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_PhoneType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PhoneType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_Phone(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_Phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_Phone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_Preferred(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_Preferred(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Preferred, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PreferredContact)
	fc.Result = res
	return ec.marshalOPreferredContact2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPreferredContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_Preferred(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PreferredContact does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_Subject(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_Subject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_Subject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_Message(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_Message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_Message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Credentials_Username(ctx context.Context, field graphql.CollectedField, obj *model.Credentials) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Credentials_Username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Credentials_Username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Credentials",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_Id(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_Created(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_Created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_Created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_Updated(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_Updated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_Updated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_Version(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_IsDeleted(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_IsDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_IsDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_Type(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EmailType)
	fc.Result = res
	return ec.marshalOEmailType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EmailType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_Address(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_Address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_Address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Job_Id(ctx context.Context, field graphql.CollectedField, obj *model.Job) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Job_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Job_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Job_Created(ctx context.Context, field graphql.CollectedField, obj *model.Job) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Job_Created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Job_Created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Job_Updated(ctx context.Context, field graphql.CollectedField, obj *model.Job) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Job_Updated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Job_Updated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Job_Version(ctx context.Context, field graphql.CollectedField, obj *model.Job) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Job_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Job_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Job_IsDeleted(ctx context.Context, field graphql.CollectedField, obj *model.Job) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Job_IsDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Job_IsDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Job_Company(ctx context.Context, field graphql.CollectedField, obj *model.Job) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Job_Company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Job_Company(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Job_Address(ctx context.Context, field graphql.CollectedField, obj *model.Job) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Job_Address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Job_Address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Address":
				return ec.fieldContext_Address_Address(ctx, field)
			case "Suite":
				return ec.fieldContext_Address_Suite(ctx, field)
			case "City":
				return ec.fieldContext_Address_City(ctx, field)
			case "State":
				return ec.fieldContext_Address_State(ctx, field)
			case "Zip":
				return ec.fieldContext_Address_Zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Address", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Job_Title(ctx context.Context, field graphql.CollectedField, obj *model.Job) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Job_Title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Job_Title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Job_Duties(ctx context.Context, field graphql.CollectedField, obj *model.Job) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Job_Duties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Job_Duties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Job_From(ctx context.Context, field graphql.CollectedField, obj *model.Job) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Job_From(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MonthYear)
	fc.Result = res
	return ec.marshalOMonthYear2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYear(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Job_From(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Month":
				return ec.fieldContext_MonthYear_Month(ctx, field)
			case "Year":
				return ec.fieldContext_MonthYear_Year(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MonthYear", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Job_To(ctx context.Context, field graphql.CollectedField, obj *model.Job) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Job_To(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MonthYear)
	fc.Result = res
	return ec.marshalOMonthYear2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYear(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Job_To(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Month":
				return ec.fieldContext_MonthYear_Month(ctx, field)
			case "Year":
				return ec.fieldContext_MonthYear_Year(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MonthYear", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_Id(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_Created(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_Created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_Created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_Updated(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_Updated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_Updated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_Version(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_IsDeleted(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_IsDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_IsDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_Url(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_Url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_Url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_Title(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_Title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_Title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_Description(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_Description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_Description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_Type(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LinkType)
	fc.Result = res
	return ec.marshalOLinkType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLinkType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LinkType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Link_Parameters(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Link_Parameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Parameter)
	fc.Result = res
	return ec.marshalOParameter2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Link_Parameters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Parameter_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Parameter_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Parameter_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Parameter_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Parameter_IsDeleted(ctx, field)
			case "Key":
				return ec.fieldContext_Parameter_Key(ctx, field)
			case "Value":
				return ec.fieldContext_Parameter_Value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Parameter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MonthYear_Month(ctx context.Context, field graphql.CollectedField, obj *model.MonthYear) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MonthYear_Month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Month)
	fc.Result = res
	return ec.marshalOMonth2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MonthYear_Month(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MonthYear",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Month does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MonthYear_Year(ctx context.Context, field graphql.CollectedField, obj *model.MonthYear) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MonthYear_Year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MonthYear_Year(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MonthYear",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createReference(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateReference(rctx, fc.Args["Name"].(*model.NameInput), fc.Args["Address"].(*model.AddressInput), fc.Args["Title"].(*string), fc.Args["Company"].(*string), fc.Args["Phones"].([]*model.PhoneInput), fc.Args["Emails"].([]*model.EmailInput), fc.Args["Credentials"].(*model.CredentialsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Reference)
	fc.Result = res
	return ec.marshalNReference2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Reference_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Reference_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Reference_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Reference_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Reference_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Reference_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Reference_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Reference_UUID(ctx, field)
			case "Address":
				return ec.fieldContext_Reference_Address(ctx, field)
			case "Title":
				return ec.fieldContext_Reference_Title(ctx, field)
			case "Company":
				return ec.fieldContext_Reference_Company(ctx, field)
			case "Phones":
				return ec.fieldContext_Reference_Phones(ctx, field)
			case "Emails":
				return ec.fieldContext_Reference_Emails(ctx, field)
			case "Comments":
				return ec.fieldContext_Reference_Comments(ctx, field)
			case "Approved":
				return ec.fieldContext_Reference_Approved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createReference_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateReference(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateReference(rctx, fc.Args["UUID"].(string), fc.Args["Name"].(*model.NameInput), fc.Args["Address"].(*model.AddressInput), fc.Args["Title"].(*string), fc.Args["Company"].(*string), fc.Args["Phones"].([]*model.PhoneInput), fc.Args["Emails"].([]*model.EmailInput), fc.Args["Credentials"].(*model.CredentialsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Reference)
	fc.Result = res
	return ec.marshalNReference2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Reference_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Reference_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Reference_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Reference_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Reference_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Reference_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Reference_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Reference_UUID(ctx, field)
			case "Address":
				return ec.fieldContext_Reference_Address(ctx, field)
			case "Title":
				return ec.fieldContext_Reference_Title(ctx, field)
			case "Company":
				return ec.fieldContext_Reference_Company(ctx, field)
			case "Phones":
				return ec.fieldContext_Reference_Phones(ctx, field)
			case "Emails":
				return ec.fieldContext_Reference_Emails(ctx, field)
			case "Comments":
				return ec.fieldContext_Reference_Comments(ctx, field)
			case "Approved":
				return ec.fieldContext_Reference_Approved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateReference_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteReference(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteReference(rctx, fc.Args["UUID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Reference)
	fc.Result = res
	return ec.marshalNReference2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Reference_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Reference_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Reference_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Reference_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Reference_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Reference_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Reference_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Reference_UUID(ctx, field)
			case "Address":
				return ec.fieldContext_Reference_Address(ctx, field)
			case "Title":
				return ec.fieldContext_Reference_Title(ctx, field)
			case "Company":
				return ec.fieldContext_Reference_Company(ctx, field)
			case "Phones":
				return ec.fieldContext_Reference_Phones(ctx, field)
			case "Emails":
				return ec.fieldContext_Reference_Emails(ctx, field)
			case "Comments":
				return ec.fieldContext_Reference_Comments(ctx, field)
			case "Approved":
				return ec.fieldContext_Reference_Approved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteReference_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_approveReference(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_approveReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ApproveReference(rctx, fc.Args["UUID"].(string), fc.Args["Approved"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Reference)
	fc.Result = res
	return ec.marshalNReference2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_approveReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Reference_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Reference_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Reference_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Reference_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Reference_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Reference_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Reference_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Reference_UUID(ctx, field)
			case "Address":
				return ec.fieldContext_Reference_Address(ctx, field)
			case "Title":
				return ec.fieldContext_Reference_Title(ctx, field)
			case "Company":
				return ec.fieldContext_Reference_Company(ctx, field)
			case "Phones":
				return ec.fieldContext_Reference_Phones(ctx, field)
			case "Emails":
				return ec.fieldContext_Reference_Emails(ctx, field)
			case "Comments":
				return ec.fieldContext_Reference_Comments(ctx, field)
			case "Approved":
				return ec.fieldContext_Reference_Approved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_approveReference_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPhone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePhone(rctx, fc.Args["Number"].(string), fc.Args["Type"].(*model.PhoneType), fc.Args["Extension"].(*string), fc.Args["AdminUUID"].(*string), fc.Args["ReferenceUUID"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Phone)
	fc.Result = res
	return ec.marshalNPhone2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPhone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Phone_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Phone_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Phone_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Phone_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Phone_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Phone_Type(ctx, field)
			case "Number":
				return ec.fieldContext_Phone_Number(ctx, field)
			case "Extension":
				return ec.fieldContext_Phone_Extension(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Phone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPhone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePhone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePhone(rctx, fc.Args["Id"].(int), fc.Args["Type"].(*model.PhoneType), fc.Args["Number"].(*string), fc.Args["Extension"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Phone)
	fc.Result = res
	return ec.marshalNPhone2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePhone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Phone_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Phone_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Phone_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Phone_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Phone_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Phone_Type(ctx, field)
			case "Number":
				return ec.fieldContext_Phone_Number(ctx, field)
			case "Extension":
				return ec.fieldContext_Phone_Extension(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Phone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePhone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePhone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePhone(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePhone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePhone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateEmail(rctx, fc.Args["Address"].(string), fc.Args["Type"].(*model.EmailType), fc.Args["AdminUUID"].(*string), fc.Args["ReferenceUUID"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Email_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Email_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Email_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Email_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Email_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Email_Type(ctx, field)
			case "Address":
				return ec.fieldContext_Email_Address(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEmail(rctx, fc.Args["Id"].(int), fc.Args["Type"].(*model.EmailType), fc.Args["Address"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Email_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Email_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Email_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Email_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Email_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Email_Type(ctx, field)
			case "Address":
				return ec.fieldContext_Email_Address(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEmail(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateJob(rctx, fc.Args["Company"].(*string), fc.Args["Address"].(*model.AddressInput), fc.Args["Title"].(*string), fc.Args["Duties"].(*string), fc.Args["From"].(*model.MonthYearInput), fc.Args["To"].(*model.MonthYearInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Job)
	fc.Result = res
	return ec.marshalNJob2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createJob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Job_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Job_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Job_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Job_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Job_IsDeleted(ctx, field)
			case "Company":
				return ec.fieldContext_Job_Company(ctx, field)
			case "Address":
				return ec.fieldContext_Job_Address(ctx, field)
			case "Title":
				return ec.fieldContext_Job_Title(ctx, field)
			case "Duties":
				return ec.fieldContext_Job_Duties(ctx, field)
			case "From":
				return ec.fieldContext_Job_From(ctx, field)
			case "To":
				return ec.fieldContext_Job_To(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Job", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createJob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateJob(rctx, fc.Args["Id"].(int), fc.Args["Company"].(*string), fc.Args["Address"].(*model.AddressInput), fc.Args["Title"].(*string), fc.Args["Duties"].(*string), fc.Args["From"].(*model.MonthYearInput), fc.Args["To"].(*model.MonthYearInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Job)
	fc.Result = res
	return ec.marshalNJob2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateJob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Job_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Job_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Job_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Job_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Job_IsDeleted(ctx, field)
			case "Company":
				return ec.fieldContext_Job_Company(ctx, field)
			case "Address":
				return ec.fieldContext_Job_Address(ctx, field)
			case "Title":
				return ec.fieldContext_Job_Title(ctx, field)
			case "Duties":
				return ec.fieldContext_Job_Duties(ctx, field)
			case "From":
				return ec.fieldContext_Job_From(ctx, field)
			case "To":
				return ec.fieldContext_Job_To(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Job", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateJob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteJob(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Job)
	fc.Result = res
	return ec.marshalNJob2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteJob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Job_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Job_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Job_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Job_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Job_IsDeleted(ctx, field)
			case "Company":
				return ec.fieldContext_Job_Company(ctx, field)
			case "Address":
				return ec.fieldContext_Job_Address(ctx, field)
			case "Title":
				return ec.fieldContext_Job_Title(ctx, field)
			case "Duties":
				return ec.fieldContext_Job_Duties(ctx, field)
			case "From":
				return ec.fieldContext_Job_From(ctx, field)
			case "To":
				return ec.fieldContext_Job_To(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Job", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteJob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSchool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSchool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSchool(rctx, fc.Args["Name"].(*string), fc.Args["Address"].(*model.AddressInput), fc.Args["Degree"].(*string), fc.Args["From"].(*model.MonthYearInput), fc.Args["To"].(*model.MonthYearInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSchool(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_School_Id(ctx, field)
			case "Created":
				return ec.fieldContext_School_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_School_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_School_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_School_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_School_Name(ctx, field)
			case "Address":
				return ec.fieldContext_School_Address(ctx, field)
			case "Program":
				return ec.fieldContext_School_Program(ctx, field)
			case "Degree":
				return ec.fieldContext_School_Degree(ctx, field)
			case "From":
				return ec.fieldContext_School_From(ctx, field)
			case "To":
				return ec.fieldContext_School_To(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type School", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSchool_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSchool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSchool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSchool(rctx, fc.Args["Id"].(int), fc.Args["Name"].(*string), fc.Args["Address"].(*model.AddressInput), fc.Args["Degree"].(*string), fc.Args["From"].(*model.MonthYearInput), fc.Args["To"].(*model.MonthYearInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSchool(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_School_Id(ctx, field)
			case "Created":
				return ec.fieldContext_School_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_School_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_School_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_School_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_School_Name(ctx, field)
			case "Address":
				return ec.fieldContext_School_Address(ctx, field)
			case "Program":
				return ec.fieldContext_School_Program(ctx, field)
			case "Degree":
				return ec.fieldContext_School_Degree(ctx, field)
			case "From":
				return ec.fieldContext_School_From(ctx, field)
			case "To":
				return ec.fieldContext_School_To(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type School", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSchool_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSchool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteSchool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSchool(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteSchool(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_School_Id(ctx, field)
			case "Created":
				return ec.fieldContext_School_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_School_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_School_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_School_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_School_Name(ctx, field)
			case "Address":
				return ec.fieldContext_School_Address(ctx, field)
			case "Program":
				return ec.fieldContext_School_Program(ctx, field)
			case "Degree":
				return ec.fieldContext_School_Degree(ctx, field)
			case "From":
				return ec.fieldContext_School_From(ctx, field)
			case "To":
				return ec.fieldContext_School_To(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type School", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSchool_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateParameter(rctx, fc.Args["Key"].(*string), fc.Args["Value"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Parameter)
	fc.Result = res
	return ec.marshalNParameter2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Parameter_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Parameter_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Parameter_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Parameter_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Parameter_IsDeleted(ctx, field)
			case "Key":
				return ec.fieldContext_Parameter_Key(ctx, field)
			case "Value":
				return ec.fieldContext_Parameter_Value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Parameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateParameter(rctx, fc.Args["Id"].(int), fc.Args["Key"].(*string), fc.Args["Value"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Parameter)
	fc.Result = res
	return ec.marshalNParameter2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Parameter_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Parameter_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Parameter_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Parameter_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Parameter_IsDeleted(ctx, field)
			case "Key":
				return ec.fieldContext_Parameter_Key(ctx, field)
			case "Value":
				return ec.fieldContext_Parameter_Value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Parameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteParameter(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Parameter)
	fc.Result = res
	return ec.marshalNParameter2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Parameter_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Parameter_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Parameter_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Parameter_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Parameter_IsDeleted(ctx, field)
			case "Key":
				return ec.fieldContext_Parameter_Key(ctx, field)
			case "Value":
				return ec.fieldContext_Parameter_Value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Parameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateLink(rctx, fc.Args["Url"].(*string), fc.Args["Title"].(*string), fc.Args["Description"].(*string), fc.Args["Type"].(*model.LinkType), fc.Args["Parameters"].([]*model.ParameterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Link)
	fc.Result = res
	return ec.marshalNLink2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLink(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Link_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Link_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Link_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Link_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Link_IsDeleted(ctx, field)
			case "Url":
				return ec.fieldContext_Link_Url(ctx, field)
			case "Title":
				return ec.fieldContext_Link_Title(ctx, field)
			case "Description":
				return ec.fieldContext_Link_Description(ctx, field)
			case "Type":
				return ec.fieldContext_Link_Type(ctx, field)
			case "Parameters":
				return ec.fieldContext_Link_Parameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Link", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLink(rctx, fc.Args["Id"].(int), fc.Args["Url"].(*string), fc.Args["Title"].(*string), fc.Args["Description"].(*string), fc.Args["Type"].(*model.LinkType), fc.Args["Parameters"].([]*model.ParameterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Link)
	fc.Result = res
	return ec.marshalNLink2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLink(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Link_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Link_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Link_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Link_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Link_IsDeleted(ctx, field)
			case "Url":
				return ec.fieldContext_Link_Url(ctx, field)
			case "Title":
				return ec.fieldContext_Link_Title(ctx, field)
			case "Description":
				return ec.fieldContext_Link_Description(ctx, field)
			case "Type":
				return ec.fieldContext_Link_Type(ctx, field)
			case "Parameters":
				return ec.fieldContext_Link_Parameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Link", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLink(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Link)
	fc.Result = res
	return ec.marshalNLink2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLink(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Link_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Link_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Link_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Link_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Link_IsDeleted(ctx, field)
			case "Url":
				return ec.fieldContext_Link_Url(ctx, field)
			case "Title":
				return ec.fieldContext_Link_Title(ctx, field)
			case "Description":
				return ec.fieldContext_Link_Description(ctx, field)
			case "Type":
				return ec.fieldContext_Link_Type(ctx, field)
			case "Parameters":
				return ec.fieldContext_Link_Parameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Link", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateComment(rctx, fc.Args["Type"].(*model.CommentType), fc.Args["Message"].(*string), fc.Args["AdminUUID"].(*string), fc.Args["ReferenceUUID"].(*string), fc.Args["VisitorUUID"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Comment_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Comment_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Comment_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Comment_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Comment_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Comment_Type(ctx, field)
			case "Message":
				return ec.fieldContext_Comment_Message(ctx, field)
			case "Approved":
				return ec.fieldContext_Comment_Approved(ctx, field)
			case "Admins":
				return ec.fieldContext_Comment_Admins(ctx, field)
			case "References":
				return ec.fieldContext_Comment_References(ctx, field)
			case "Visitors":
				return ec.fieldContext_Comment_Visitors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateComment(rctx, fc.Args["Id"].(int), fc.Args["Type"].(*model.CommentType), fc.Args["Message"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Comment_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Comment_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Comment_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Comment_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Comment_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Comment_Type(ctx, field)
			case "Message":
				return ec.fieldContext_Comment_Message(ctx, field)
			case "Approved":
				return ec.fieldContext_Comment_Approved(ctx, field)
			case "Admins":
				return ec.fieldContext_Comment_Admins(ctx, field)
			case "References":
				return ec.fieldContext_Comment_References(ctx, field)
			case "Visitors":
				return ec.fieldContext_Comment_Visitors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteComment(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Comment_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Comment_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Comment_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Comment_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Comment_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Comment_Type(ctx, field)
			case "Message":
				return ec.fieldContext_Comment_Message(ctx, field)
			case "Approved":
				return ec.fieldContext_Comment_Approved(ctx, field)
			case "Admins":
				return ec.fieldContext_Comment_Admins(ctx, field)
			case "References":
				return ec.fieldContext_Comment_References(ctx, field)
			case "Visitors":
				return ec.fieldContext_Comment_Visitors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_approveComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_approveComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ApproveComment(rctx, fc.Args["Id"].(int), fc.Args["Approved"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_approveComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Comment_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Comment_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Comment_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Comment_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Comment_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Comment_Type(ctx, field)
			case "Message":
				return ec.fieldContext_Comment_Message(ctx, field)
			case "Approved":
				return ec.fieldContext_Comment_Approved(ctx, field)
			case "Admins":
				return ec.fieldContext_Comment_Admins(ctx, field)
			case "References":
				return ec.fieldContext_Comment_References(ctx, field)
			case "Visitors":
				return ec.fieldContext_Comment_Visitors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_approveComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAdmin(rctx, fc.Args["Name"].(*model.NameInput), fc.Args["Credentials"].(*model.CredentialsInput), fc.Args["Address"].(*model.AddressInput), fc.Args["Phones"].([]*model.PhoneInput), fc.Args["Emails"].([]*model.EmailInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Admin)
	fc.Result = res
	return ec.marshalNAdmin2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAdmin(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Admin_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Admin_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Admin_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Admin_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Admin_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Admin_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Admin_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Admin_UUID(ctx, field)
			case "Address":
				return ec.fieldContext_Admin_Address(ctx, field)
			case "Phones":
				return ec.fieldContext_Admin_Phones(ctx, field)
			case "Emails":
				return ec.fieldContext_Admin_Emails(ctx, field)
			case "Comments":
				return ec.fieldContext_Admin_Comments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Admin", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAdmin_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAdmin(rctx, fc.Args["UUID"].(string), fc.Args["Name"].(*model.NameInput), fc.Args["Credentials"].(*model.CredentialsInput), fc.Args["Address"].(*model.AddressInput), fc.Args["Phones"].([]*model.PhoneInput), fc.Args["Emails"].([]*model.EmailInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Admin)
	fc.Result = res
	return ec.marshalNAdmin2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAdmin(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Admin_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Admin_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Admin_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Admin_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Admin_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Admin_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Admin_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Admin_UUID(ctx, field)
			case "Address":
				return ec.fieldContext_Admin_Address(ctx, field)
			case "Phones":
				return ec.fieldContext_Admin_Phones(ctx, field)
			case "Emails":
				return ec.fieldContext_Admin_Emails(ctx, field)
			case "Comments":
				return ec.fieldContext_Admin_Comments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Admin", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAdmin_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAdmin(rctx, fc.Args["UUID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Admin)
	fc.Result = res
	return ec.marshalNAdmin2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAdmin(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Admin_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Admin_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Admin_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Admin_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Admin_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Admin_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Admin_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Admin_UUID(ctx, field)
			case "Address":
				return ec.fieldContext_Admin_Address(ctx, field)
			case "Phones":
				return ec.fieldContext_Admin_Phones(ctx, field)
			case "Emails":
				return ec.fieldContext_Admin_Emails(ctx, field)
			case "Comments":
				return ec.fieldContext_Admin_Comments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Admin", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteAdmin_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createVisitor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createVisitor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateVisitor(rctx, fc.Args["Name"].(*model.NameInput), fc.Args["Credentials"].(*model.CredentialsInput), fc.Args["Email"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Visitor)
	fc.Result = res
	return ec.marshalNVisitor2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐVisitor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createVisitor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Visitor_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Visitor_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Visitor_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Visitor_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Visitor_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Visitor_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Visitor_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Visitor_UUID(ctx, field)
			case "Email":
				return ec.fieldContext_Visitor_Email(ctx, field)
			case "Approved":
				return ec.fieldContext_Visitor_Approved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Visitor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createVisitor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateVisitor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateVisitor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVisitor(rctx, fc.Args["UUID"].(string), fc.Args["Name"].(*model.NameInput), fc.Args["Address"].(*model.AddressInput), fc.Args["Credentials"].(*model.CredentialsInput), fc.Args["Email"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Visitor)
	fc.Result = res
	return ec.marshalNVisitor2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐVisitor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateVisitor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Visitor_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Visitor_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Visitor_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Visitor_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Visitor_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Visitor_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Visitor_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Visitor_UUID(ctx, field)
			case "Email":
				return ec.fieldContext_Visitor_Email(ctx, field)
			case "Approved":
				return ec.fieldContext_Visitor_Approved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Visitor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateVisitor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteVisitor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteVisitor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVisitor(rctx, fc.Args["UUID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Visitor)
	fc.Result = res
	return ec.marshalNVisitor2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐVisitor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteVisitor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Visitor_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Visitor_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Visitor_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Visitor_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Visitor_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Visitor_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Visitor_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Visitor_UUID(ctx, field)
			case "Email":
				return ec.fieldContext_Visitor_Email(ctx, field)
			case "Approved":
				return ec.fieldContext_Visitor_Approved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Visitor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteVisitor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePage(rctx, fc.Args["Name"].(string), fc.Args["Content"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Page)
	fc.Result = res
	return ec.marshalNPage2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Page_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Page_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Page_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Page_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Page_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Page_Name(ctx, field)
			case "Content":
				return ec.fieldContext_Page_Content(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePage(rctx, fc.Args["Name"].(string), fc.Args["Content"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Page)
	fc.Result = res
	return ec.marshalNPage2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Page_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Page_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Page_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Page_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Page_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Page_Name(ctx, field)
			case "Content":
				return ec.fieldContext_Page_Content(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePage(rctx, fc.Args["Name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Page)
	fc.Result = res
	return ec.marshalNPage2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Page_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Page_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Page_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Page_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Page_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Page_Name(ctx, field)
			case "Content":
				return ec.fieldContext_Page_Content(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateContact(rctx, fc.Args["Name"].(*model.NameInput), fc.Args["Address"].(*model.AddressInput), fc.Args["EmailType"].(*model.EmailType), fc.Args["Email"].(*string), fc.Args["PhoneType"].(*model.PhoneType), fc.Args["Phone"].(*string), fc.Args["Preferred"].(*model.PreferredContact), fc.Args["Subject"].(*string), fc.Args["Message"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Contact_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Contact_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Contact_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Contact_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Contact_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Contact_Name(ctx, field)
			case "Address":
				return ec.fieldContext_Contact_Address(ctx, field)
			case "EmailType":
				return ec.fieldContext_Contact_EmailType(ctx, field)
			case "Email":
				return ec.fieldContext_Contact_Email(ctx, field)
			case "PhoneType":
				return ec.fieldContext_Contact_PhoneType(ctx, field)
			case "Phone":
				return ec.fieldContext_Contact_Phone(ctx, field)
			case "Preferred":
				return ec.fieldContext_Contact_Preferred(ctx, field)
			case "Subject":
				return ec.fieldContext_Contact_Subject(ctx, field)
			case "Message":
				return ec.fieldContext_Contact_Message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateContact(rctx, fc.Args["Id"].(int), fc.Args["Name"].(*model.NameInput), fc.Args["Address"].(*model.AddressInput), fc.Args["EmailType"].(*model.EmailType), fc.Args["Email"].(*string), fc.Args["PhoneType"].(*model.PhoneType), fc.Args["Phone"].(*string), fc.Args["Preferred"].(*model.PreferredContact), fc.Args["Subject"].(*string), fc.Args["Message"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Contact_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Contact_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Contact_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Contact_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Contact_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Contact_Name(ctx, field)
			case "Address":
				return ec.fieldContext_Contact_Address(ctx, field)
			case "EmailType":
				return ec.fieldContext_Contact_EmailType(ctx, field)
			case "Email":
				return ec.fieldContext_Contact_Email(ctx, field)
			case "PhoneType":
				return ec.fieldContext_Contact_PhoneType(ctx, field)
			case "Phone":
				return ec.fieldContext_Contact_Phone(ctx, field)
			case "Preferred":
				return ec.fieldContext_Contact_Preferred(ctx, field)
			case "Subject":
				return ec.fieldContext_Contact_Subject(ctx, field)
			case "Message":
				return ec.fieldContext_Contact_Message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteContact(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Contact_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Contact_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Contact_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Contact_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Contact_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Contact_Name(ctx, field)
			case "Address":
				return ec.fieldContext_Contact_Address(ctx, field)
			case "EmailType":
				return ec.fieldContext_Contact_EmailType(ctx, field)
			case "Email":
				return ec.fieldContext_Contact_Email(ctx, field)
			case "PhoneType":
				return ec.fieldContext_Contact_PhoneType(ctx, field)
			case "Phone":
				return ec.fieldContext_Contact_Phone(ctx, field)
			case "Preferred":
				return ec.fieldContext_Contact_Preferred(ctx, field)
			case "Subject":
				return ec.fieldContext_Contact_Subject(ctx, field)
			case "Message":
				return ec.fieldContext_Contact_Message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_loginVisitor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_loginVisitor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LoginVisitor(rctx, fc.Args["Username"].(*string), fc.Args["Password"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Auth)
	fc.Result = res
	return ec.marshalNAuth2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAuth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_loginVisitor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Token":
				return ec.fieldContext_Auth_Token(ctx, field)
			case "UUID":
				return ec.fieldContext_Auth_UUID(ctx, field)
			case "Class":
				return ec.fieldContext_Auth_Class(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Auth", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_loginVisitor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_loginReference(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_loginReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LoginReference(rctx, fc.Args["Username"].(*string), fc.Args["Password"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Auth)
	fc.Result = res
	return ec.marshalNAuth2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAuth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_loginReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Token":
				return ec.fieldContext_Auth_Token(ctx, field)
			case "UUID":
				return ec.fieldContext_Auth_UUID(ctx, field)
			case "Class":
				return ec.fieldContext_Auth_Class(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Auth", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_loginReference_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_loginAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_loginAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LoginAdmin(rctx, fc.Args["Username"].(*string), fc.Args["Password"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Auth)
	fc.Result = res
	return ec.marshalNAuth2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAuth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_loginAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Token":
				return ec.fieldContext_Auth_Token(ctx, field)
			case "UUID":
				return ec.fieldContext_Auth_UUID(ctx, field)
			case "Class":
				return ec.fieldContext_Auth_Class(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Auth", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_loginAdmin_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Name_Salutation(ctx context.Context, field graphql.CollectedField, obj *model.Name) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Name_Salutation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salutation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Salutation)
	fc.Result = res
	return ec.marshalOSalutation2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐSalutation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Name_Salutation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Name",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Salutation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Name_First(ctx context.Context, field graphql.CollectedField, obj *model.Name) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Name_First(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.First, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Name_First(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Name",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Name_Middle(ctx context.Context, field graphql.CollectedField, obj *model.Name) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Name_Middle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Middle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Name_Middle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Name",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Name_Last(ctx context.Context, field graphql.CollectedField, obj *model.Name) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Name_Last(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Last, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Name_Last(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Name",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Name_Suffix(ctx context.Context, field graphql.CollectedField, obj *model.Name) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Name_Suffix(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suffix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Name_Suffix(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Name",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_Id(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_Created(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_Created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_Created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_Updated(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_Updated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_Updated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_Version(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_IsDeleted(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_IsDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_IsDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_Name(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Page_Content(ctx context.Context, field graphql.CollectedField, obj *model.Page) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Page_Content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Page_Content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Page",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Parameter_Id(ctx context.Context, field graphql.CollectedField, obj *model.Parameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Parameter_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Parameter_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Parameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Parameter_Created(ctx context.Context, field graphql.CollectedField, obj *model.Parameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Parameter_Created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Parameter_Created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Parameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Parameter_Updated(ctx context.Context, field graphql.CollectedField, obj *model.Parameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Parameter_Updated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Parameter_Updated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Parameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Parameter_Version(ctx context.Context, field graphql.CollectedField, obj *model.Parameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Parameter_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Parameter_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Parameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Parameter_IsDeleted(ctx context.Context, field graphql.CollectedField, obj *model.Parameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Parameter_IsDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Parameter_IsDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Parameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Parameter_Key(ctx context.Context, field graphql.CollectedField, obj *model.Parameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Parameter_Key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Parameter_Key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Parameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Parameter_Value(ctx context.Context, field graphql.CollectedField, obj *model.Parameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Parameter_Value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Parameter_Value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Parameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Phone_Id(ctx context.Context, field graphql.CollectedField, obj *model.Phone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Phone_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Phone_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Phone_Created(ctx context.Context, field graphql.CollectedField, obj *model.Phone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Phone_Created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Phone_Created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Phone_Updated(ctx context.Context, field graphql.CollectedField, obj *model.Phone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Phone_Updated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Phone_Updated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Phone_Version(ctx context.Context, field graphql.CollectedField, obj *model.Phone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Phone_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Phone_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Phone_IsDeleted(ctx context.Context, field graphql.CollectedField, obj *model.Phone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Phone_IsDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Phone_IsDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Phone_Type(ctx context.Context, field graphql.CollectedField, obj *model.Phone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Phone_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PhoneType)
	fc.Result = res
	return ec.marshalOPhoneType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Phone_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PhoneType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Phone_Number(ctx context.Context, field graphql.CollectedField, obj *model.Phone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Phone_Number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Phone_Number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Phone_Extension(ctx context.Context, field graphql.CollectedField, obj *model.Phone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Phone_Extension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Phone_Extension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Phone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getReferences(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getReferences(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetReferences(rctx, fc.Args["IsDeleted"].(*bool), fc.Args["Limit"].(*int), fc.Args["Offset"].(*int), fc.Args["Approved"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Reference)
	fc.Result = res
	return ec.marshalNReference2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReferenceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getReferences(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Reference_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Reference_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Reference_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Reference_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Reference_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Reference_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Reference_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Reference_UUID(ctx, field)
			case "Address":
				return ec.fieldContext_Reference_Address(ctx, field)
			case "Title":
				return ec.fieldContext_Reference_Title(ctx, field)
			case "Company":
				return ec.fieldContext_Reference_Company(ctx, field)
			case "Phones":
				return ec.fieldContext_Reference_Phones(ctx, field)
			case "Emails":
				return ec.fieldContext_Reference_Emails(ctx, field)
			case "Comments":
				return ec.fieldContext_Reference_Comments(ctx, field)
			case "Approved":
				return ec.fieldContext_Reference_Approved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getReferences_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_showReference(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_showReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ShowReference(rctx, fc.Args["UUID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Reference)
	fc.Result = res
	return ec.marshalNReference2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_showReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Reference_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Reference_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Reference_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Reference_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Reference_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Reference_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Reference_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Reference_UUID(ctx, field)
			case "Address":
				return ec.fieldContext_Reference_Address(ctx, field)
			case "Title":
				return ec.fieldContext_Reference_Title(ctx, field)
			case "Company":
				return ec.fieldContext_Reference_Company(ctx, field)
			case "Phones":
				return ec.fieldContext_Reference_Phones(ctx, field)
			case "Emails":
				return ec.fieldContext_Reference_Emails(ctx, field)
			case "Comments":
				return ec.fieldContext_Reference_Comments(ctx, field)
			case "Approved":
				return ec.fieldContext_Reference_Approved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_showReference_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPhones(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPhones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPhones(rctx, fc.Args["Limit"].(*int), fc.Args["Offset"].(*int), fc.Args["IsDeleted"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Phone)
	fc.Result = res
	return ec.marshalNPhone2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPhones(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Phone_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Phone_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Phone_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Phone_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Phone_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Phone_Type(ctx, field)
			case "Number":
				return ec.fieldContext_Phone_Number(ctx, field)
			case "Extension":
				return ec.fieldContext_Phone_Extension(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Phone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPhones_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_showPhone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_showPhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ShowPhone(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Phone)
	fc.Result = res
	return ec.marshalNPhone2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_showPhone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Phone_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Phone_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Phone_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Phone_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Phone_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Phone_Type(ctx, field)
			case "Number":
				return ec.fieldContext_Phone_Number(ctx, field)
			case "Extension":
				return ec.fieldContext_Phone_Extension(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Phone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_showPhone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getEmails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getEmails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetEmails(rctx, fc.Args["Limit"].(*int), fc.Args["Offset"].(*int), fc.Args["IsDeleted"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getEmails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Email_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Email_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Email_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Email_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Email_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Email_Type(ctx, field)
			case "Address":
				return ec.fieldContext_Email_Address(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getEmails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_showEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_showEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ShowEmail(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_showEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Email_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Email_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Email_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Email_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Email_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Email_Type(ctx, field)
			case "Address":
				return ec.fieldContext_Email_Address(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_showEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getJobs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getJobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetJobs(rctx, fc.Args["Limit"].(*int), fc.Args["Offset"].(*int), fc.Args["IsDeleted"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Job)
	fc.Result = res
	return ec.marshalNJob2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐJobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getJobs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Job_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Job_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Job_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Job_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Job_IsDeleted(ctx, field)
			case "Company":
				return ec.fieldContext_Job_Company(ctx, field)
			case "Address":
				return ec.fieldContext_Job_Address(ctx, field)
			case "Title":
				return ec.fieldContext_Job_Title(ctx, field)
			case "Duties":
				return ec.fieldContext_Job_Duties(ctx, field)
			case "From":
				return ec.fieldContext_Job_From(ctx, field)
			case "To":
				return ec.fieldContext_Job_To(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Job", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getJobs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_showJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_showJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ShowJob(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Job)
	fc.Result = res
	return ec.marshalNJob2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_showJob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Job_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Job_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Job_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Job_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Job_IsDeleted(ctx, field)
			case "Company":
				return ec.fieldContext_Job_Company(ctx, field)
			case "Address":
				return ec.fieldContext_Job_Address(ctx, field)
			case "Title":
				return ec.fieldContext_Job_Title(ctx, field)
			case "Duties":
				return ec.fieldContext_Job_Duties(ctx, field)
			case "From":
				return ec.fieldContext_Job_From(ctx, field)
			case "To":
				return ec.fieldContext_Job_To(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Job", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_showJob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSchools(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSchools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSchools(rctx, fc.Args["Limit"].(*int), fc.Args["Offset"].(*int), fc.Args["IsDeleted"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐSchoolᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSchools(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_School_Id(ctx, field)
			case "Created":
				return ec.fieldContext_School_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_School_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_School_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_School_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_School_Name(ctx, field)
			case "Address":
				return ec.fieldContext_School_Address(ctx, field)
			case "Program":
				return ec.fieldContext_School_Program(ctx, field)
			case "Degree":
				return ec.fieldContext_School_Degree(ctx, field)
			case "From":
				return ec.fieldContext_School_From(ctx, field)
			case "To":
				return ec.fieldContext_School_To(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type School", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSchools_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_showSchool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_showSchool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ShowSchool(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_showSchool(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_School_Id(ctx, field)
			case "Created":
				return ec.fieldContext_School_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_School_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_School_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_School_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_School_Name(ctx, field)
			case "Address":
				return ec.fieldContext_School_Address(ctx, field)
			case "Program":
				return ec.fieldContext_School_Program(ctx, field)
			case "Degree":
				return ec.fieldContext_School_Degree(ctx, field)
			case "From":
				return ec.fieldContext_School_From(ctx, field)
			case "To":
				return ec.fieldContext_School_To(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type School", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_showSchool_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getParameters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetParameters(rctx, fc.Args["Limit"].(*int), fc.Args["Offset"].(*int), fc.Args["IsDeleted"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Parameter)
	fc.Result = res
	return ec.marshalNParameter2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getParameters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Parameter_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Parameter_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Parameter_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Parameter_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Parameter_IsDeleted(ctx, field)
			case "Key":
				return ec.fieldContext_Parameter_Key(ctx, field)
			case "Value":
				return ec.fieldContext_Parameter_Value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Parameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getParameters_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_showParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_showParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ShowParameter(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Parameter)
	fc.Result = res
	return ec.marshalNParameter2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_showParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Parameter_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Parameter_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Parameter_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Parameter_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Parameter_IsDeleted(ctx, field)
			case "Key":
				return ec.fieldContext_Parameter_Key(ctx, field)
			case "Value":
				return ec.fieldContext_Parameter_Value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Parameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_showParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getLinks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetLinks(rctx, fc.Args["Limit"].(*int), fc.Args["Offset"].(*int), fc.Args["IsDeleted"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Link)
	fc.Result = res
	return ec.marshalNLink2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLinkᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Link_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Link_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Link_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Link_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Link_IsDeleted(ctx, field)
			case "Url":
				return ec.fieldContext_Link_Url(ctx, field)
			case "Title":
				return ec.fieldContext_Link_Title(ctx, field)
			case "Description":
				return ec.fieldContext_Link_Description(ctx, field)
			case "Type":
				return ec.fieldContext_Link_Type(ctx, field)
			case "Parameters":
				return ec.fieldContext_Link_Parameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Link", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getLinks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_showLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_showLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ShowLink(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Link)
	fc.Result = res
	return ec.marshalNLink2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLink(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_showLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Link_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Link_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Link_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Link_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Link_IsDeleted(ctx, field)
			case "Url":
				return ec.fieldContext_Link_Url(ctx, field)
			case "Title":
				return ec.fieldContext_Link_Title(ctx, field)
			case "Description":
				return ec.fieldContext_Link_Description(ctx, field)
			case "Type":
				return ec.fieldContext_Link_Type(ctx, field)
			case "Parameters":
				return ec.fieldContext_Link_Parameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Link", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_showLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getComments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getComments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetComments(rctx, fc.Args["IsDeleted"].(*bool), fc.Args["Limit"].(*int), fc.Args["Offset"].(*int), fc.Args["Approved"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getComments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Comment_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Comment_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Comment_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Comment_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Comment_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Comment_Type(ctx, field)
			case "Message":
				return ec.fieldContext_Comment_Message(ctx, field)
			case "Approved":
				return ec.fieldContext_Comment_Approved(ctx, field)
			case "Admins":
				return ec.fieldContext_Comment_Admins(ctx, field)
			case "References":
				return ec.fieldContext_Comment_References(ctx, field)
			case "Visitors":
				return ec.fieldContext_Comment_Visitors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getComments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_showComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_showComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ShowComment(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_showComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Comment_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Comment_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Comment_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Comment_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Comment_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Comment_Type(ctx, field)
			case "Message":
				return ec.fieldContext_Comment_Message(ctx, field)
			case "Approved":
				return ec.fieldContext_Comment_Approved(ctx, field)
			case "Admins":
				return ec.fieldContext_Comment_Admins(ctx, field)
			case "References":
				return ec.fieldContext_Comment_References(ctx, field)
			case "Visitors":
				return ec.fieldContext_Comment_Visitors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_showComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_showAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_showAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ShowAdmin(rctx, fc.Args["UUID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Admin)
	fc.Result = res
	return ec.marshalNAdmin2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAdmin(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_showAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Admin_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Admin_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Admin_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Admin_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Admin_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Admin_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Admin_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Admin_UUID(ctx, field)
			case "Address":
				return ec.fieldContext_Admin_Address(ctx, field)
			case "Phones":
				return ec.fieldContext_Admin_Phones(ctx, field)
			case "Emails":
				return ec.fieldContext_Admin_Emails(ctx, field)
			case "Comments":
				return ec.fieldContext_Admin_Comments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Admin", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_showAdmin_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getVisitors(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getVisitors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVisitors(rctx, fc.Args["Limit"].(*int), fc.Args["Offset"].(*int), fc.Args["IsDeleted"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Visitor)
	fc.Result = res
	return ec.marshalNVisitor2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐVisitorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getVisitors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Visitor_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Visitor_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Visitor_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Visitor_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Visitor_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Visitor_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Visitor_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Visitor_UUID(ctx, field)
			case "Email":
				return ec.fieldContext_Visitor_Email(ctx, field)
			case "Approved":
				return ec.fieldContext_Visitor_Approved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Visitor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getVisitors_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_showVisitor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_showVisitor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ShowVisitor(rctx, fc.Args["UUID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Visitor)
	fc.Result = res
	return ec.marshalNVisitor2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐVisitor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_showVisitor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Visitor_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Visitor_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Visitor_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Visitor_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Visitor_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Visitor_Name(ctx, field)
			case "Credentials":
				return ec.fieldContext_Visitor_Credentials(ctx, field)
			case "UUID":
				return ec.fieldContext_Visitor_UUID(ctx, field)
			case "Email":
				return ec.fieldContext_Visitor_Email(ctx, field)
			case "Approved":
				return ec.fieldContext_Visitor_Approved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Visitor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_showVisitor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPages(rctx, fc.Args["Limit"].(*int), fc.Args["Offset"].(*int), fc.Args["IsDeleted"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Page)
	fc.Result = res
	return ec.marshalNPage2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Page_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Page_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Page_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Page_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Page_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Page_Name(ctx, field)
			case "Content":
				return ec.fieldContext_Page_Content(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPages_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_showPage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_showPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ShowPage(rctx, fc.Args["Name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Page)
	fc.Result = res
	return ec.marshalNPage2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_showPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Page_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Page_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Page_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Page_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Page_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Page_Name(ctx, field)
			case "Content":
				return ec.fieldContext_Page_Content(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Page", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_showPage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getContacts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getContacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetContacts(rctx, fc.Args["Limit"].(*int), fc.Args["Offset"].(*int), fc.Args["IsDeleted"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐContactᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getContacts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Contact_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Contact_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Contact_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Contact_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Contact_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Contact_Name(ctx, field)
			case "Address":
				return ec.fieldContext_Contact_Address(ctx, field)
			case "EmailType":
				return ec.fieldContext_Contact_EmailType(ctx, field)
			case "Email":
				return ec.fieldContext_Contact_Email(ctx, field)
			case "PhoneType":
				return ec.fieldContext_Contact_PhoneType(ctx, field)
			case "Phone":
				return ec.fieldContext_Contact_Phone(ctx, field)
			case "Preferred":
				return ec.fieldContext_Contact_Preferred(ctx, field)
			case "Subject":
				return ec.fieldContext_Contact_Subject(ctx, field)
			case "Message":
				return ec.fieldContext_Contact_Message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getContacts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_showContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_showContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ShowContact(rctx, fc.Args["Id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_showContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Contact_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Contact_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Contact_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Contact_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Contact_IsDeleted(ctx, field)
			case "Name":
				return ec.fieldContext_Contact_Name(ctx, field)
			case "Address":
				return ec.fieldContext_Contact_Address(ctx, field)
			case "EmailType":
				return ec.fieldContext_Contact_EmailType(ctx, field)
			case "Email":
				return ec.fieldContext_Contact_Email(ctx, field)
			case "PhoneType":
				return ec.fieldContext_Contact_PhoneType(ctx, field)
			case "Phone":
				return ec.fieldContext_Contact_Phone(ctx, field)
			case "Preferred":
				return ec.fieldContext_Contact_Preferred(ctx, field)
			case "Subject":
				return ec.fieldContext_Contact_Subject(ctx, field)
			case "Message":
				return ec.fieldContext_Contact_Message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_showContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_Id(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_Created(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_Created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_Created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_Updated(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_Updated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_Updated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_Version(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_IsDeleted(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_IsDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_IsDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_Name(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Name)
	fc.Result = res
	return ec.marshalOName2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐName(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Salutation":
				return ec.fieldContext_Name_Salutation(ctx, field)
			case "First":
				return ec.fieldContext_Name_First(ctx, field)
			case "Middle":
				return ec.fieldContext_Name_Middle(ctx, field)
			case "Last":
				return ec.fieldContext_Name_Last(ctx, field)
			case "Suffix":
				return ec.fieldContext_Name_Suffix(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Name", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_Credentials(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_Credentials(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Credentials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Credentials)
	fc.Result = res
	return ec.marshalOCredentials2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCredentials(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_Credentials(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Username":
				return ec.fieldContext_Credentials_Username(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Credentials", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_UUID(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_UUID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_UUID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_Address(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_Address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_Address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Address":
				return ec.fieldContext_Address_Address(ctx, field)
			case "Suite":
				return ec.fieldContext_Address_Suite(ctx, field)
			case "City":
				return ec.fieldContext_Address_City(ctx, field)
			case "State":
				return ec.fieldContext_Address_State(ctx, field)
			case "Zip":
				return ec.fieldContext_Address_Zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Address", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_Title(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_Title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_Title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_Company(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_Company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_Company(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_Phones(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_Phones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phones, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Phone)
	fc.Result = res
	return ec.marshalOPhone2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_Phones(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Phone_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Phone_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Phone_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Phone_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Phone_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Phone_Type(ctx, field)
			case "Number":
				return ec.fieldContext_Phone_Number(ctx, field)
			case "Extension":
				return ec.fieldContext_Phone_Extension(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Phone", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_Emails(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_Emails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Emails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Email)
	fc.Result = res
	return ec.marshalOEmail2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_Emails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Email_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Email_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Email_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Email_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Email_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Email_Type(ctx, field)
			case "Address":
				return ec.fieldContext_Email_Address(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_Comments(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_Comments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_Comments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_Comment_Id(ctx, field)
			case "Created":
				return ec.fieldContext_Comment_Created(ctx, field)
			case "Updated":
				return ec.fieldContext_Comment_Updated(ctx, field)
			case "Version":
				return ec.fieldContext_Comment_Version(ctx, field)
			case "IsDeleted":
				return ec.fieldContext_Comment_IsDeleted(ctx, field)
			case "Type":
				return ec.fieldContext_Comment_Type(ctx, field)
			case "Message":
				return ec.fieldContext_Comment_Message(ctx, field)
			case "Approved":
				return ec.fieldContext_Comment_Approved(ctx, field)
			case "Admins":
				return ec.fieldContext_Comment_Admins(ctx, field)
			case "References":
				return ec.fieldContext_Comment_References(ctx, field)
			case "Visitors":
				return ec.fieldContext_Comment_Visitors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_Approved(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_Approved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_Approved(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _School_Id(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_School_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_School_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _School_Created(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_School_Created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_School_Created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _School_Updated(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_School_Updated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_School_Updated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _School_Version(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_School_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_School_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _School_IsDeleted(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_School_IsDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_School_IsDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _School_Name(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_School_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_School_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _School_Address(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_School_Address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_School_Address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Address":
				return ec.fieldContext_Address_Address(ctx, field)
			case "Suite":
				return ec.fieldContext_Address_Suite(ctx, field)
			case "City":
				return ec.fieldContext_Address_City(ctx, field)
			case "State":
				return ec.fieldContext_Address_State(ctx, field)
			case "Zip":
				return ec.fieldContext_Address_Zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Address", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _School_Program(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_School_Program(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Program, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_School_Program(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _School_Degree(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_School_Degree(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Degree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_School_Degree(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _School_From(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_School_From(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MonthYear)
	fc.Result = res
	return ec.marshalOMonthYear2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYear(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_School_From(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Month":
				return ec.fieldContext_MonthYear_Month(ctx, field)
			case "Year":
				return ec.fieldContext_MonthYear_Year(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MonthYear", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _School_To(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_School_To(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MonthYear)
	fc.Result = res
	return ec.marshalOMonthYear2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYear(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_School_To(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Month":
				return ec.fieldContext_MonthYear_Month(ctx, field)
			case "Year":
				return ec.fieldContext_MonthYear_Year(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MonthYear", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Visitor_Id(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Visitor_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Visitor_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Visitor_Created(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Visitor_Created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Visitor_Created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Visitor_Updated(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Visitor_Updated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Visitor_Updated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Visitor_Version(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Visitor_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Visitor_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Visitor_IsDeleted(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Visitor_IsDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Visitor_IsDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Visitor_Name(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Visitor_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Name)
	fc.Result = res
	return ec.marshalOName2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐName(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Visitor_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Salutation":
				return ec.fieldContext_Name_Salutation(ctx, field)
			case "First":
				return ec.fieldContext_Name_First(ctx, field)
			case "Middle":
				return ec.fieldContext_Name_Middle(ctx, field)
			case "Last":
				return ec.fieldContext_Name_Last(ctx, field)
			case "Suffix":
				return ec.fieldContext_Name_Suffix(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Name", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Visitor_Credentials(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Visitor_Credentials(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Credentials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Credentials)
	fc.Result = res
	return ec.marshalOCredentials2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCredentials(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Visitor_Credentials(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Username":
				return ec.fieldContext_Credentials_Username(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Credentials", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Visitor_UUID(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Visitor_UUID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Visitor_UUID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Visitor_Email(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Visitor_Email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Visitor_Email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Visitor_Approved(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Visitor_Approved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Visitor_Approved(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddressInput(ctx context.Context, obj interface{}) (model.AddressInput, error) {
	var it model.AddressInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"Address", "Suite", "City", "State", "Zip"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "Address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "Suite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Suite"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Suite = data
		case "City":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("City"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "State":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("State"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.State = data
		case "Zip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Zip"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Zip = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCredentialsInput(ctx context.Context, obj interface{}) (model.CredentialsInput, error) {
	var it model.CredentialsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"Username", "Password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "Username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "Password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailInput(ctx context.Context, obj interface{}) (model.EmailInput, error) {
	var it model.EmailInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"Id", "Type", "Address"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "Id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			data, err := ec.unmarshalOEmailType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "Address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMonthYearInput(ctx context.Context, obj interface{}) (model.MonthYearInput, error) {
	var it model.MonthYearInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"Month", "Year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "Month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Month"))
			data, err := ec.unmarshalOMonth2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonth(ctx, v)
			if err != nil {
				return it, err
			}
			it.Month = data
		case "Year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Year"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNameInput(ctx context.Context, obj interface{}) (model.NameInput, error) {
	var it model.NameInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"Salutation", "First", "Middle", "Last", "Suffix"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "Salutation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Salutation"))
			data, err := ec.unmarshalOSalutation2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐSalutation(ctx, v)
			if err != nil {
				return it, err
			}
			it.Salutation = data
		case "First":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("First"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.First = data
		case "Middle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Middle"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Middle = data
		case "Last":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Last"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Last = data
		case "Suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Suffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Suffix = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputParameterInput(ctx context.Context, obj interface{}) (model.ParameterInput, error) {
	var it model.ParameterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"Id", "Key", "Value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "Id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "Key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Key"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "Value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Value"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhoneInput(ctx context.Context, obj interface{}) (model.PhoneInput, error) {
	var it model.PhoneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"Id", "Type", "Number", "Extension"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "Id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			data, err := ec.unmarshalOPhoneType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "Number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Number"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Number = data
		case "Extension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Extension"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Extension = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var addressImplementors = []string{"Address"}

func (ec *executionContext) _Address(ctx context.Context, sel ast.SelectionSet, obj *model.Address) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addressImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Address")
		case "Address":
			out.Values[i] = ec._Address_Address(ctx, field, obj)
		case "Suite":
			out.Values[i] = ec._Address_Suite(ctx, field, obj)
		case "City":
			out.Values[i] = ec._Address_City(ctx, field, obj)
		case "State":
			out.Values[i] = ec._Address_State(ctx, field, obj)
		case "Zip":
			out.Values[i] = ec._Address_Zip(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var adminImplementors = []string{"Admin"}

func (ec *executionContext) _Admin(ctx context.Context, sel ast.SelectionSet, obj *model.Admin) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Admin")
		case "Id":
			out.Values[i] = ec._Admin_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Created":
			out.Values[i] = ec._Admin_Created(ctx, field, obj)
		case "Updated":
			out.Values[i] = ec._Admin_Updated(ctx, field, obj)
		case "Version":
			out.Values[i] = ec._Admin_Version(ctx, field, obj)
		case "IsDeleted":
			out.Values[i] = ec._Admin_IsDeleted(ctx, field, obj)
		case "Name":
			out.Values[i] = ec._Admin_Name(ctx, field, obj)
		case "Credentials":
			out.Values[i] = ec._Admin_Credentials(ctx, field, obj)
		case "UUID":
			out.Values[i] = ec._Admin_UUID(ctx, field, obj)
		case "Address":
			out.Values[i] = ec._Admin_Address(ctx, field, obj)
		case "Phones":
			out.Values[i] = ec._Admin_Phones(ctx, field, obj)
		case "Emails":
			out.Values[i] = ec._Admin_Emails(ctx, field, obj)
		case "Comments":
			out.Values[i] = ec._Admin_Comments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var authImplementors = []string{"Auth"}

func (ec *executionContext) _Auth(ctx context.Context, sel ast.SelectionSet, obj *model.Auth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Auth")
		case "Token":
			out.Values[i] = ec._Auth_Token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "UUID":
			out.Values[i] = ec._Auth_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Class":
			out.Values[i] = ec._Auth_Class(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commentImplementors = []string{"Comment"}

func (ec *executionContext) _Comment(ctx context.Context, sel ast.SelectionSet, obj *model.Comment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Comment")
		case "Id":
			out.Values[i] = ec._Comment_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Created":
			out.Values[i] = ec._Comment_Created(ctx, field, obj)
		case "Updated":
			out.Values[i] = ec._Comment_Updated(ctx, field, obj)
		case "Version":
			out.Values[i] = ec._Comment_Version(ctx, field, obj)
		case "IsDeleted":
			out.Values[i] = ec._Comment_IsDeleted(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._Comment_Type(ctx, field, obj)
		case "Message":
			out.Values[i] = ec._Comment_Message(ctx, field, obj)
		case "Approved":
			out.Values[i] = ec._Comment_Approved(ctx, field, obj)
		case "Admins":
			out.Values[i] = ec._Comment_Admins(ctx, field, obj)
		case "References":
			out.Values[i] = ec._Comment_References(ctx, field, obj)
		case "Visitors":
			out.Values[i] = ec._Comment_Visitors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contactImplementors = []string{"Contact"}

func (ec *executionContext) _Contact(ctx context.Context, sel ast.SelectionSet, obj *model.Contact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Contact")
		case "Id":
			out.Values[i] = ec._Contact_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Created":
			out.Values[i] = ec._Contact_Created(ctx, field, obj)
		case "Updated":
			out.Values[i] = ec._Contact_Updated(ctx, field, obj)
		case "Version":
			out.Values[i] = ec._Contact_Version(ctx, field, obj)
		case "IsDeleted":
			out.Values[i] = ec._Contact_IsDeleted(ctx, field, obj)
		case "Name":
			out.Values[i] = ec._Contact_Name(ctx, field, obj)
		case "Address":
			out.Values[i] = ec._Contact_Address(ctx, field, obj)
		case "EmailType":
			out.Values[i] = ec._Contact_EmailType(ctx, field, obj)
		case "Email":
			out.Values[i] = ec._Contact_Email(ctx, field, obj)
		case "PhoneType":
			out.Values[i] = ec._Contact_PhoneType(ctx, field, obj)
		case "Phone":
			out.Values[i] = ec._Contact_Phone(ctx, field, obj)
		case "Preferred":
			out.Values[i] = ec._Contact_Preferred(ctx, field, obj)
		case "Subject":
			out.Values[i] = ec._Contact_Subject(ctx, field, obj)
		case "Message":
			out.Values[i] = ec._Contact_Message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var credentialsImplementors = []string{"Credentials"}

func (ec *executionContext) _Credentials(ctx context.Context, sel ast.SelectionSet, obj *model.Credentials) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, credentialsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Credentials")
		case "Username":
			out.Values[i] = ec._Credentials_Username(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emailImplementors = []string{"Email"}

func (ec *executionContext) _Email(ctx context.Context, sel ast.SelectionSet, obj *model.Email) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emailImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Email")
		case "Id":
			out.Values[i] = ec._Email_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Created":
			out.Values[i] = ec._Email_Created(ctx, field, obj)
		case "Updated":
			out.Values[i] = ec._Email_Updated(ctx, field, obj)
		case "Version":
			out.Values[i] = ec._Email_Version(ctx, field, obj)
		case "IsDeleted":
			out.Values[i] = ec._Email_IsDeleted(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._Email_Type(ctx, field, obj)
		case "Address":
			out.Values[i] = ec._Email_Address(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobImplementors = []string{"Job"}

func (ec *executionContext) _Job(ctx context.Context, sel ast.SelectionSet, obj *model.Job) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Job")
		case "Id":
			out.Values[i] = ec._Job_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Created":
			out.Values[i] = ec._Job_Created(ctx, field, obj)
		case "Updated":
			out.Values[i] = ec._Job_Updated(ctx, field, obj)
		case "Version":
			out.Values[i] = ec._Job_Version(ctx, field, obj)
		case "IsDeleted":
			out.Values[i] = ec._Job_IsDeleted(ctx, field, obj)
		case "Company":
			out.Values[i] = ec._Job_Company(ctx, field, obj)
		case "Address":
			out.Values[i] = ec._Job_Address(ctx, field, obj)
		case "Title":
			out.Values[i] = ec._Job_Title(ctx, field, obj)
		case "Duties":
			out.Values[i] = ec._Job_Duties(ctx, field, obj)
		case "From":
			out.Values[i] = ec._Job_From(ctx, field, obj)
		case "To":
			out.Values[i] = ec._Job_To(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var linkImplementors = []string{"Link"}

func (ec *executionContext) _Link(ctx context.Context, sel ast.SelectionSet, obj *model.Link) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, linkImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Link")
		case "Id":
			out.Values[i] = ec._Link_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Created":
			out.Values[i] = ec._Link_Created(ctx, field, obj)
		case "Updated":
			out.Values[i] = ec._Link_Updated(ctx, field, obj)
		case "Version":
			out.Values[i] = ec._Link_Version(ctx, field, obj)
		case "IsDeleted":
			out.Values[i] = ec._Link_IsDeleted(ctx, field, obj)
		case "Url":
			out.Values[i] = ec._Link_Url(ctx, field, obj)
		case "Title":
			out.Values[i] = ec._Link_Title(ctx, field, obj)
		case "Description":
			out.Values[i] = ec._Link_Description(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._Link_Type(ctx, field, obj)
		case "Parameters":
			out.Values[i] = ec._Link_Parameters(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var monthYearImplementors = []string{"MonthYear"}

func (ec *executionContext) _MonthYear(ctx context.Context, sel ast.SelectionSet, obj *model.MonthYear) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, monthYearImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MonthYear")
		case "Month":
			out.Values[i] = ec._MonthYear_Month(ctx, field, obj)
		case "Year":
			out.Values[i] = ec._MonthYear_Year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createReference":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createReference(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateReference":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateReference(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteReference":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteReference(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "approveReference":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_approveReference(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createPhone":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPhone(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatePhone":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePhone(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletePhone":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePhone(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createEmail":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createEmail(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateEmail":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEmail(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteEmail":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEmail(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createJob":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createJob(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateJob":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateJob(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteJob":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteJob(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createSchool":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSchool(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateSchool":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSchool(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteSchool":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSchool(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createParameter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createParameter(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateParameter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateParameter(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteParameter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteParameter(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createLink":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createLink(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateLink":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLink(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteLink":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteLink(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createComment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createComment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateComment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateComment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteComment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteComment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "approveComment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_approveComment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createAdmin":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAdmin(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAdmin":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAdmin(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteAdmin":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAdmin(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createVisitor":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createVisitor(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateVisitor":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateVisitor(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteVisitor":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteVisitor(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createPage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatePage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletePage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "loginVisitor":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_loginVisitor(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "loginReference":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_loginReference(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "loginAdmin":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_loginAdmin(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var nameImplementors = []string{"Name"}

func (ec *executionContext) _Name(ctx context.Context, sel ast.SelectionSet, obj *model.Name) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nameImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Name")
		case "Salutation":
			out.Values[i] = ec._Name_Salutation(ctx, field, obj)
		case "First":
			out.Values[i] = ec._Name_First(ctx, field, obj)
		case "Middle":
			out.Values[i] = ec._Name_Middle(ctx, field, obj)
		case "Last":
			out.Values[i] = ec._Name_Last(ctx, field, obj)
		case "Suffix":
			out.Values[i] = ec._Name_Suffix(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageImplementors = []string{"Page"}

func (ec *executionContext) _Page(ctx context.Context, sel ast.SelectionSet, obj *model.Page) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Page")
		case "Id":
			out.Values[i] = ec._Page_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Created":
			out.Values[i] = ec._Page_Created(ctx, field, obj)
		case "Updated":
			out.Values[i] = ec._Page_Updated(ctx, field, obj)
		case "Version":
			out.Values[i] = ec._Page_Version(ctx, field, obj)
		case "IsDeleted":
			out.Values[i] = ec._Page_IsDeleted(ctx, field, obj)
		case "Name":
			out.Values[i] = ec._Page_Name(ctx, field, obj)
		case "Content":
			out.Values[i] = ec._Page_Content(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var parameterImplementors = []string{"Parameter"}

func (ec *executionContext) _Parameter(ctx context.Context, sel ast.SelectionSet, obj *model.Parameter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, parameterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Parameter")
		case "Id":
			out.Values[i] = ec._Parameter_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Created":
			out.Values[i] = ec._Parameter_Created(ctx, field, obj)
		case "Updated":
			out.Values[i] = ec._Parameter_Updated(ctx, field, obj)
		case "Version":
			out.Values[i] = ec._Parameter_Version(ctx, field, obj)
		case "IsDeleted":
			out.Values[i] = ec._Parameter_IsDeleted(ctx, field, obj)
		case "Key":
			out.Values[i] = ec._Parameter_Key(ctx, field, obj)
		case "Value":
			out.Values[i] = ec._Parameter_Value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var phoneImplementors = []string{"Phone"}

func (ec *executionContext) _Phone(ctx context.Context, sel ast.SelectionSet, obj *model.Phone) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, phoneImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Phone")
		case "Id":
			out.Values[i] = ec._Phone_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Created":
			out.Values[i] = ec._Phone_Created(ctx, field, obj)
		case "Updated":
			out.Values[i] = ec._Phone_Updated(ctx, field, obj)
		case "Version":
			out.Values[i] = ec._Phone_Version(ctx, field, obj)
		case "IsDeleted":
			out.Values[i] = ec._Phone_IsDeleted(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._Phone_Type(ctx, field, obj)
		case "Number":
			out.Values[i] = ec._Phone_Number(ctx, field, obj)
		case "Extension":
			out.Values[i] = ec._Phone_Extension(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getReferences":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getReferences(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "showReference":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_showReference(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPhones":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPhones(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "showPhone":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_showPhone(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getEmails":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getEmails(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "showEmail":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_showEmail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getJobs":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getJobs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "showJob":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_showJob(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getSchools":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSchools(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "showSchool":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_showSchool(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getParameters":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getParameters(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "showParameter":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_showParameter(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getLinks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLinks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "showLink":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_showLink(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getComments":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getComments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "showComment":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_showComment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "showAdmin":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_showAdmin(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getVisitors":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVisitors(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "showVisitor":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_showVisitor(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPages":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPages(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "showPage":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_showPage(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getContacts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getContacts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "showContact":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_showContact(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var referenceImplementors = []string{"Reference"}

func (ec *executionContext) _Reference(ctx context.Context, sel ast.SelectionSet, obj *model.Reference) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, referenceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Reference")
		case "Id":
			out.Values[i] = ec._Reference_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Created":
			out.Values[i] = ec._Reference_Created(ctx, field, obj)
		case "Updated":
			out.Values[i] = ec._Reference_Updated(ctx, field, obj)
		case "Version":
			out.Values[i] = ec._Reference_Version(ctx, field, obj)
		case "IsDeleted":
			out.Values[i] = ec._Reference_IsDeleted(ctx, field, obj)
		case "Name":
			out.Values[i] = ec._Reference_Name(ctx, field, obj)
		case "Credentials":
			out.Values[i] = ec._Reference_Credentials(ctx, field, obj)
		case "UUID":
			out.Values[i] = ec._Reference_UUID(ctx, field, obj)
		case "Address":
			out.Values[i] = ec._Reference_Address(ctx, field, obj)
		case "Title":
			out.Values[i] = ec._Reference_Title(ctx, field, obj)
		case "Company":
			out.Values[i] = ec._Reference_Company(ctx, field, obj)
		case "Phones":
			out.Values[i] = ec._Reference_Phones(ctx, field, obj)
		case "Emails":
			out.Values[i] = ec._Reference_Emails(ctx, field, obj)
		case "Comments":
			out.Values[i] = ec._Reference_Comments(ctx, field, obj)
		case "Approved":
			out.Values[i] = ec._Reference_Approved(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var schoolImplementors = []string{"School"}

func (ec *executionContext) _School(ctx context.Context, sel ast.SelectionSet, obj *model.School) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, schoolImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("School")
		case "Id":
			out.Values[i] = ec._School_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Created":
			out.Values[i] = ec._School_Created(ctx, field, obj)
		case "Updated":
			out.Values[i] = ec._School_Updated(ctx, field, obj)
		case "Version":
			out.Values[i] = ec._School_Version(ctx, field, obj)
		case "IsDeleted":
			out.Values[i] = ec._School_IsDeleted(ctx, field, obj)
		case "Name":
			out.Values[i] = ec._School_Name(ctx, field, obj)
		case "Address":
			out.Values[i] = ec._School_Address(ctx, field, obj)
		case "Program":
			out.Values[i] = ec._School_Program(ctx, field, obj)
		case "Degree":
			out.Values[i] = ec._School_Degree(ctx, field, obj)
		case "From":
			out.Values[i] = ec._School_From(ctx, field, obj)
		case "To":
			out.Values[i] = ec._School_To(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var visitorImplementors = []string{"Visitor"}

func (ec *executionContext) _Visitor(ctx context.Context, sel ast.SelectionSet, obj *model.Visitor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, visitorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Visitor")
		case "Id":
			out.Values[i] = ec._Visitor_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Created":
			out.Values[i] = ec._Visitor_Created(ctx, field, obj)
		case "Updated":
			out.Values[i] = ec._Visitor_Updated(ctx, field, obj)
		case "Version":
			out.Values[i] = ec._Visitor_Version(ctx, field, obj)
		case "IsDeleted":
			out.Values[i] = ec._Visitor_IsDeleted(ctx, field, obj)
		case "Name":
			out.Values[i] = ec._Visitor_Name(ctx, field, obj)
		case "Credentials":
			out.Values[i] = ec._Visitor_Credentials(ctx, field, obj)
		case "UUID":
			out.Values[i] = ec._Visitor_UUID(ctx, field, obj)
		case "Email":
			out.Values[i] = ec._Visitor_Email(ctx, field, obj)
		case "Approved":
			out.Values[i] = ec._Visitor_Approved(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAdmin2githubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAdmin(ctx context.Context, sel ast.SelectionSet, v model.Admin) graphql.Marshaler {
	return ec._Admin(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdmin2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAdmin(ctx context.Context, sel ast.SelectionSet, v *model.Admin) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Admin(ctx, sel, v)
}

func (ec *executionContext) marshalNAuth2githubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAuth(ctx context.Context, sel ast.SelectionSet, v model.Auth) graphql.Marshaler {
	return ec._Auth(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuth2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAuth(ctx context.Context, sel ast.SelectionSet, v *model.Auth) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Auth(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNComment2githubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v model.Comment) graphql.Marshaler {
	return ec._Comment(ctx, sel, &v)
}

func (ec *executionContext) marshalNComment2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCommentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Comment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComment2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNComment2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v *model.Comment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) marshalNContact2githubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐContact(ctx context.Context, sel ast.SelectionSet, v model.Contact) graphql.Marshaler {
	return ec._Contact(ctx, sel, &v)
}

func (ec *executionContext) marshalNContact2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐContactᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Contact) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContact2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐContact(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNContact2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐContact(ctx context.Context, sel ast.SelectionSet, v *model.Contact) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Contact(ctx, sel, v)
}

func (ec *executionContext) marshalNEmail2githubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmail(ctx context.Context, sel ast.SelectionSet, v model.Email) graphql.Marshaler {
	return ec._Email(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmail2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Email) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmail2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEmail2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmail(ctx context.Context, sel ast.SelectionSet, v *model.Email) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Email(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEmailInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailInput(ctx context.Context, v interface{}) (*model.EmailInput, error) {
	res, err := ec.unmarshalInputEmailInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNJob2githubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐJob(ctx context.Context, sel ast.SelectionSet, v model.Job) graphql.Marshaler {
	return ec._Job(ctx, sel, &v)
}

func (ec *executionContext) marshalNJob2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐJobᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Job) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNJob2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐJob(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNJob2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐJob(ctx context.Context, sel ast.SelectionSet, v *model.Job) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Job(ctx, sel, v)
}

func (ec *executionContext) marshalNLink2githubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLink(ctx context.Context, sel ast.SelectionSet, v model.Link) graphql.Marshaler {
	return ec._Link(ctx, sel, &v)
}

func (ec *executionContext) marshalNLink2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLinkᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Link) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLink2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLink(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLink2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLink(ctx context.Context, sel ast.SelectionSet, v *model.Link) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Link(ctx, sel, v)
}

func (ec *executionContext) marshalNPage2githubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPage(ctx context.Context, sel ast.SelectionSet, v model.Page) graphql.Marshaler {
	return ec._Page(ctx, sel, &v)
}

func (ec *executionContext) marshalNPage2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPageᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Page) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPage2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPage2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPage(ctx context.Context, sel ast.SelectionSet, v *model.Page) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Page(ctx, sel, v)
}

func (ec *executionContext) marshalNParameter2githubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameter(ctx context.Context, sel ast.SelectionSet, v model.Parameter) graphql.Marshaler {
	return ec._Parameter(ctx, sel, &v)
}

func (ec *executionContext) marshalNParameter2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameterᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Parameter) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParameter2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNParameter2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameter(ctx context.Context, sel ast.SelectionSet, v *model.Parameter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Parameter(ctx, sel, v)
}

func (ec *executionContext) unmarshalNParameterInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameterInput(ctx context.Context, v interface{}) (*model.ParameterInput, error) {
	res, err := ec.unmarshalInputParameterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPhone2githubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhone(ctx context.Context, sel ast.SelectionSet, v model.Phone) graphql.Marshaler {
	return ec._Phone(ctx, sel, &v)
}

func (ec *executionContext) marshalNPhone2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Phone) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPhone2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhone(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPhone2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhone(ctx context.Context, sel ast.SelectionSet, v *model.Phone) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Phone(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPhoneInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneInput(ctx context.Context, v interface{}) (*model.PhoneInput, error) {
	res, err := ec.unmarshalInputPhoneInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReference2githubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReference(ctx context.Context, sel ast.SelectionSet, v model.Reference) graphql.Marshaler {
	return ec._Reference(ctx, sel, &v)
}

func (ec *executionContext) marshalNReference2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReferenceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Reference) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReference2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReference(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNReference2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReference(ctx context.Context, sel ast.SelectionSet, v *model.Reference) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Reference(ctx, sel, v)
}

func (ec *executionContext) marshalNSchool2githubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐSchool(ctx context.Context, sel ast.SelectionSet, v model.School) graphql.Marshaler {
	return ec._School(ctx, sel, &v)
}

func (ec *executionContext) marshalNSchool2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐSchoolᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.School) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSchool2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐSchool(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSchool2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐSchool(ctx context.Context, sel ast.SelectionSet, v *model.School) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._School(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNVisitor2githubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐVisitor(ctx context.Context, sel ast.SelectionSet, v model.Visitor) graphql.Marshaler {
	return ec._Visitor(ctx, sel, &v)
}

func (ec *executionContext) marshalNVisitor2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐVisitorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Visitor) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVisitor2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐVisitor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVisitor2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐVisitor(ctx context.Context, sel ast.SelectionSet, v *model.Visitor) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Visitor(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAddress2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddress(ctx context.Context, sel ast.SelectionSet, v *model.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Address(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAddressInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAddressInput(ctx context.Context, v interface{}) (*model.AddressInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAddressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAdmin2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAdmin(ctx context.Context, sel ast.SelectionSet, v []*model.Admin) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAdmin2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAdmin(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAdmin2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐAdmin(ctx context.Context, sel ast.SelectionSet, v *model.Admin) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Admin(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOComment2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v []*model.Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComment2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOComment2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v *model.Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommentType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCommentType(ctx context.Context, v interface{}) (*model.CommentType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CommentType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommentType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCommentType(ctx context.Context, sel ast.SelectionSet, v *model.CommentType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCredentials2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCredentials(ctx context.Context, sel ast.SelectionSet, v *model.Credentials) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Credentials(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCredentialsInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐCredentialsInput(ctx context.Context, v interface{}) (*model.CredentialsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCredentialsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmail2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmail(ctx context.Context, sel ast.SelectionSet, v []*model.Email) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEmail2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOEmail2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmail(ctx context.Context, sel ast.SelectionSet, v *model.Email) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Email(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEmailInput2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailInputᚄ(ctx context.Context, v interface{}) ([]*model.EmailInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.EmailInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEmailInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEmailType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailType(ctx context.Context, v interface{}) (*model.EmailType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.EmailType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmailType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐEmailType(ctx context.Context, sel ast.SelectionSet, v *model.EmailType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOLinkType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLinkType(ctx context.Context, v interface{}) (*model.LinkType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.LinkType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLinkType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐLinkType(ctx context.Context, sel ast.SelectionSet, v *model.LinkType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMonth2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonth(ctx context.Context, v interface{}) (*model.Month, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Month)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMonth2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonth(ctx context.Context, sel ast.SelectionSet, v *model.Month) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMonthYear2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYear(ctx context.Context, sel ast.SelectionSet, v *model.MonthYear) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MonthYear(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMonthYearInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐMonthYearInput(ctx context.Context, v interface{}) (*model.MonthYearInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMonthYearInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOName2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐName(ctx context.Context, sel ast.SelectionSet, v *model.Name) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Name(ctx, sel, v)
}

func (ec *executionContext) unmarshalONameInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐNameInput(ctx context.Context, v interface{}) (*model.NameInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNameInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOParameter2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameterᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Parameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParameter2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOParameterInput2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameterInputᚄ(ctx context.Context, v interface{}) ([]*model.ParameterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ParameterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParameterInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐParameterInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPhone2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhone(ctx context.Context, sel ast.SelectionSet, v []*model.Phone) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPhone2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhone(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPhone2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhone(ctx context.Context, sel ast.SelectionSet, v *model.Phone) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Phone(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPhoneInput2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneInputᚄ(ctx context.Context, v interface{}) ([]*model.PhoneInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.PhoneInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPhoneInput2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPhoneType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneType(ctx context.Context, v interface{}) (*model.PhoneType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PhoneType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPhoneType2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPhoneType(ctx context.Context, sel ast.SelectionSet, v *model.PhoneType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPreferredContact2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPreferredContact(ctx context.Context, v interface{}) (*model.PreferredContact, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PreferredContact)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPreferredContact2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐPreferredContact(ctx context.Context, sel ast.SelectionSet, v *model.PreferredContact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOReference2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReference(ctx context.Context, sel ast.SelectionSet, v []*model.Reference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReference2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReference(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReference2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐReference(ctx context.Context, sel ast.SelectionSet, v *model.Reference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Reference(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSalutation2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐSalutation(ctx context.Context, v interface{}) (*model.Salutation, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Salutation)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSalutation2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐSalutation(ctx context.Context, sel ast.SelectionSet, v *model.Salutation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOVisitor2ᚕᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐVisitor(ctx context.Context, sel ast.SelectionSet, v []*model.Visitor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVisitor2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐVisitor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOVisitor2ᚖgithubᚗcomᚋrossiᚑjeffᚋgoᚑresumeᚑgraphqlᚋgraphᚋmodelᚐVisitor(ctx context.Context, sel ast.SelectionSet, v *model.Visitor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Visitor(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
